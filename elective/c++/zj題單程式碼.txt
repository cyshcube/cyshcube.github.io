a002
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a,b;

	while(cin >> a >> b)
	{
		cout << a+b << endl;
	}

	return 0;
}


a004
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int y;
    
  while (cin >> y)
	{
    if(y%4==0 && y%100!=0 || y%400==0)
      cout << "閏年" << endl;
    else
      cout << "平年"<<endl;
  }    
	
	return 0;
}

a005
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int main(int argc, char** argv) {
	
	int n,a,b,c,d;

	cin >> n;
	for (int i=0;i<n;i++)
	{
		cin >> a >> b >> c >> d;
		if (b/a==c/b)
			cout << a << " " << b << " " << c << " " << d << " " << d*(b/a) << endl;
		else
			cout << a << " " << b << " " << c << " " << d << " " << d+(b-a) << endl;
	}
	
	return 0;
}


a006
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a,b,c,d;
	float x1,x2;

	while(cin >> a >> b >>c ) 
	{
	
		d=b*b-4*a*c;
		x1=(-b+sqrt(d))/(2*a);
		x2=(-b-sqrt(d))/(2*a);

		if(d > 0)
		{ 
			cout << "Two different roots x1=" << x1 << " , x2=" << x2 << endl;
		}
		else if(d==0)
		{
			cout << "Two same roots x="<< x1 << endl;
		}
		else
		{
			cout << "No real root" << endl;
		}
		
	}

	return 0;
}


a009
#include <iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char s[100];
    
	while(cin.getline(s,100))
	{
      for(int i=0;i<strlen(s);i++)
			     cout<<(char)((int)s[i]-7);
            		
        cout << endl;
    }
	return 0;
}

#include <iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {
	
  char s[100];
    
	while(cin >> s)
	{
    for(int i=0;i<strlen(s);i++)
		   cout<<(char)((int)s[i]-7);
            		
    cout << endl;
  }
	
  return 0;
}


a010
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 	
	  int p,n;
    while(cin >> n)
    {
        for(p=2;p<=sqrt(n);p++)
        {
        	  int power=0;
            while(n%p==0) //p為n的因數 
            {
                n/=p;
                power++;  //計算次方 
            }
            
			      if(power!=0)
            {
                if(n==1)
                    cout << p << "^" << power << endl;
                else if(power==1)
                    cout << p << " * ";
                else
                    cout << p << "^" << power << " * ";
            }
        }
        if(n>1)
            cout << n << endl;
    }
    
	return 0;
}


a015
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int m,n;
  while(cin>>m>>n)
	{
   	int A[m][n];
  
   	for(int i=0;i<m;i++)
		{
     	for(int j=0;j<n;j++)
			{
      		cin>>A[i][j];
     	}
   	}
     
	 	for(int i=0;i<n;i++)
		{
     	for(int j=0;j<m;j++)
			{
     		cout<<A[j][i]<<" ";
     	}
     	cout<<endl;
   	}
    
  }
	return 0;
}


a016
#include <iostream>
#include <set>
using namespace std;
int main()
{
    int su[9][9];
    while(cin >> su[0][0])
    {
        bool sudoku=true;
        for(int j=1;j<9;j++)
            cin >> su[0][j];

        for(int i=1;i<9;i++)
            for(int j=0;j<9;j++)
                cin >> su[i][j];

        for(int i=0;i<9;i++)    //判斷橫向是否符合數獨
        {
            set<int> s;
            for(int j=0;j<9;j++)
                s.insert(su[i][j]);
            if(s.size()!=9)
                sudoku=false;
        }

        for(int i=0;i<9;i++)    //判斷直向是否符合數獨
        {
            set<int> s;
            for(int j=0;j<9;j++)
                s.insert(su[j][i]);
            if(s.size()!=9)
                sudoku=false;
        }

        for(int i=0;i<9;i+=3)  //判斷九宮格是否符合數獨
            for(int j=0;j<9;j+=3)
            {
                set<int> s;
                for(int x=i;x<i+3;x++)
                    for(int y=j;y<j+3;y++)
                        s.insert(su[x][y]);
                if(s.size()!=9)
                    sudoku=false;
            }

        cout << (sudoku ? "yes":"no") << endl;
    }
}


a017
#include <iostream>
#include <stack>
#include <sstream>
#include <cstring>
using namespace std;

typedef long long int LL;
stack<char> opStack;
stack<LL>  valStack;

void calc(){
	char op=opStack.top(); opStack.pop();
	LL b=valStack.top(); valStack.pop();
	LL a=valStack.top(); valStack.pop();

	if (op=='+')
		valStack.push(a+b);
	else if (op=='-')
		valStack.push(a-b);
	else if (op=='*')
		valStack.push(a*b);
	else if (op=='/')
		valStack.push(a/b);
	else if (op=='%')
		valStack.push(a % b);
}

int main(int argc, char** argv) {
	int pri[256];
	pri['*']=pri['/']=pri['%']=2;
	pri['+']=pri['-']=1;
	pri['(']=0;

	string str;
	while(getline(cin,str))
	{
		str="( " + str + " )";
		stringstream ss(str);

		while(ss >> str)
		{
			char ch=str[0];
			if(isdigit(ch))
				valStack.push( atoi(str.c_str()) );
			else
			{
				if (ch=='(')
					opStack.push(ch);
				else if (ch==')')
				{
					while( opStack.top() != '(' )
						calc();
					opStack.pop();
				}
				else
				{
					while( pri[ch] <= pri[opStack.top()] ) //運算子優先權 <= 堆疊內運算子優先權，則堆疊內的運算子先運算。
						calc();
					opStack.push(ch);
				}
			}
		}

		cout << valStack.top() << endl;
	}

	return 0;
}


a020
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int E[26]={10,11,12,13,14,15,16,17,34,18,19,20,21,22,35,23,24,25,26,27,28,29,32,30,31,33};
  char c;
  int id,sum;
    
  while(cin >> c >> id)
  {
  	sum=id%10;
  	id/=10;
    	
  	for (int i=1;i<=8;i++)
  	{
			sum+=i*(id%10);
			id/=10;
		}
		sum+=(E[c-65]%10)*9;
		sum+=E[c-65]/10;
		cout << (sum%10==0?"real":"fake") << endl;
  }
    
	return 0;
}


a022
#include <iostream>
#include <string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {
	
	string str;
	while( getline(cin,str) )
	{
		string rev;
		for(int i=str.length()-1;i >= 0;i--)
			rev += str[i];
		
		if(rev == str)
			cout << "yes\n";
		else
			cout << "no\n";
	}
	
  return 0;
}
    

a024
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int a,b,i,gcd;

	while(cin >> a >> b)
	{
		for (i=1;i<=a && i<=b;i++)
		{
			if (a%i==0 && b%i==0)						
				gcd=i;
		}
		
		cout << gcd << endl;
	}
	
	
	return 0;
}


#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int main(int argc, char** argv) {
	int big,small,rem;

	while(cin >> small >> big)
	{

		while(small!=0)
		{
			rem=big%small;
			big=small;
			small=rem;
		}
		
		cout << big << endl;
	}
	
	return 0;
}


a034
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
  int n,b[31];
  
  while(cin>>n)
  {
		int i=0;
    while(n>0)
  	{
  		b[i++]=n%2;	//b[i]=n%2;	i++;
  		n/=2;
  	}
  	
		for(int j=i-1;j>=0;j--)
  	{
  		cout<<b[j];
  	}
  	cout<<endl;
  }
	
  return 0;
}


a038
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    
	int n,r=0;
  while(cin>>n)
	{
    while(n>=1){
	    r=r*10+n%10;
      n=(n-(n%10))/10;
    }
        
    cout << r << endl;
  }
	
	return 0;
}


a040
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 	
	int n,m;

	while(cin >> n >> m)
	{
		int total=0;
		for(int i=n;i<=m;i++)
		{
			int sum=0,num=i,power=0,place[7];
			do
			{
				place[power++]=num%10;
				num/=10;
			}while(num>0);
			
			for(int j=0;j<power;j++)
				sum+=pow(place[j],power);
			
			if(sum==i)
			{
				cout << i << " ";
				total++;
			}
		}	
		
		if(total==0)
			cout << "none" ;
			
		cout << endl;
	}
    
	return 0;
}


a042
#include<iostream>
using namespace std;

int main()
{
	int n;
	while( cin >> n )
  {
		cout << 2+2*(n-1)*n/2 << endl; 
	}	
	return 0;
}


a044
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n;
	
	while(cin >> n)
	{
		cout << n*(n*n+5)/6+1 << endl;
	}	
	
	return 0;
}

#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int plane(int n ){
  if (n==0)
    return 1; 
	else
  	return plane(n-1)+n;
}

int space(int n ){
     
  if (n==0)
    return 1; 
	else
  	return space(n-1)+plane(n-1);
}

int main(int argc, char** argv) {

	int n;
	while(cin>>n)
	{
		cout << space(n) << endl;
	}
	return 0;
}


a053
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 
	int n;
	
	while(cin >> n)
	{

		if(n>=40)
		{
			cout << 100 << endl;
		}
		else if( n>=20)
		{
			cout << 80+(n-20) << endl;
		}
		else if(n>=10)
		{
			cout << 60+(n-10)*2 << endl;
		}
		else
		{
			cout << n*6 << endl;	
		}
				
	}
      
	return 0;
}


a054
#include <iostream>
#include<string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	char id[10];
	int eng[26]={10,11,12,13,14,15,16,17,34,18,19,20,21,22,35,23,24,25,26,27,28,29,32,30,31,33};
	int sum;
	
	while(cin >> id){
		sum=id[8]-'0';
		for(int i=0;i<8;i++)
			sum+=(id[i]-'0')*(8-i);
		
		for(int i=0;i<26;i++)
			if( (eng[i]/10+eng[i]%10*9+sum)%10==0)
				cout << (char)(i+'A');
		cout << endl;
	}
	return 0;
}


a058
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int i,n,p,sum0=0,sum1=0,sum2=0;
	cin >> n;
	
	for(i=0;i<n;i++)
	{
		cin >> p;

		if(p%3==0)
			sum0++;
		else if(p%3==1)
			sum1++;
		else
			sum2++;
	}

	cout << sum0 << " "<< sum1 << " " << sum2;	

	
	return 0;
}


a065
#include <iostream>
#include<cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char pwd[8];
  while(cin.getline(pwd,8))
	{
     for(int i=0;i<6;i++)
       cout << abs(pwd[i+1]-pwd[i]);
     cout <<endl;
  }
	
  return 0;
}

#include <iostream>
#include<cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char pwd[8];
  while(cin >> pwd)
	{
    for(int i=0;i<6;i++)
      cout << abs(pwd[i+1]-pwd[i]);
    cout <<endl;
  }
	return 0;
}


a104
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int i,j,n,temp,num[1000];
    
  while(cin >> n)
  {
		for (i=0;i<n;i++)
		{
			cin >> num[i];
		}

   	for (i=0;i<n;i++)
   	{
   		for (j=0;j<n-1-i;j++)
   		{
   			if (num[j]>num[j+1])
   			{
	   			temp=num[j];
   				num[j]=num[j+1];
   				num[j+1]=temp;
				}
			}
		}		
		
		for (int i=0;i<n;i++)
			cout << num[i] << " ";
		cout << endl;

  }
    
	return 0;
}

#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int num[1000],i,n;
    
  while(cin >> n)
  {
		for (i=0;i<n;i++)
			cin >> num[i];

		sort(num,num+n);
		
		for (i=0;i<n;i++)
			cout << num[i] << " ";
		cout << endl;
  }
    
	return 0;
}


a121
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool isprime (int n)
{
      
	bool prime=true;

	if(n==1)
      prime=false;
      
  for (int i=2;i<=sqrt(n);i++)
	{
    if(n%i==0)
		{
      prime=false;
      break;
    }
  }
      
  return prime;
}

int main(int argc, char** argv) {
	
  int a,b;
    
  while (cin >>a>>b ){
    int count=0;
          
    for (int i=a;i<=b;i++)
      if (isprime(i))
        count++;
          
      cout <<count<<endl;
  }
	return 0;
}


a147
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int i,n;

	while(cin >> n)
	{
		if (n==0)
			break;
		
		for (i=1;i<n;i++)
			if (i%7!=0)
				cout << i << " ";
		cout << endl;
	}
	
	return 0;
}


a148
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n,s,i,sum=0;
	float ave;
	
	while(cin >> n)
	{
		sum=0;
		for (i=0;i<n;i++)
		{
			cin >> s;
			sum=sum+s;
		}
		
		ave=(float)sum/n;
		
		if (ave>59)
			cout << "no"<< endl;
		else
			cout << "yes"<< endl;
	}
	
	return 0;
}


a149
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int t,n,sum;

	cin >> t;
	for (int i=0;i<t;i++)
	{
		cin >> n;
		sum=1;
		
		if(n==0)
			sum=0;
		while(n>0)
		{
			sum*=n%10;
			n/=10;
		}
		cout << sum << endl;
	}
	
	return 0;
}


#include <iostream>
#include <cstring>
using namespace std;

int main(int argc, char** argv) {
	int T;
	char n[11];

	cin >> T;
	for (int i=0;i<T;i++)
	{
		int product=1;

    cin >> n;
		
		for (int j=0;j<strlen(n);j++)
			product*=n[j]-48;

		cout << product << endl;
	}
	return 0;
}


a215
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int m,n,i,c,sum;

	while(cin >> n >> m)
	{
		sum=0;
		i=n;
		c=0;
		
		do
		{
			sum+=i;
			i++;
			c++;
		}while(sum<=m);

		cout << c<< endl;
	}
	
	return 0;
}


a216
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

long long int f(int n ){
	return n*(n+1)/2;
}

long long int g(int n ){
    
  if (n==1 )
        return 1; 
	else
    	return f(n)+g(n-1);
}

int main(int argc, char** argv) {

	int n;
	while(cin>>n)
	{
		cout << f(n) << " "<< g(n) <<endl;
	}
	return 0;
}


a224
#include <iostream>
#include<cctype>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {
	
  char s[1001];
	int alphabet[26];
    
	while(cin >> s){
        
		int odd=0;
		for(int i=0;i<26;i++)
			alphabet[i]=0;
            
    for(int i=0;i<strlen(s);i++)
      if(isalpha(s[i]))
         alphabet[toupper(s[i])-65]++;

    for(int i=0;i<26;i++)
      if(alphabet[i]%2==1)
				odd++;

    cout << (odd <=1 ? "yes !\n":"no...\n");
  }
	return 0;
}


a225
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool cmp(int a,int b){
    if(a%10 < b%10)
		return true;
    if(a%10 > b%10)
		return false;
    if(a>b)
	 	return true;
    else
		return false;

/*    if(a%10==b%10)
		return a>b;
    else return 
		a%10<b%10;
*/
}

int main(int argc, char** argv) {
	
  int n,num[1000];
    
  while(cin >> n)
  {
    for(int i=0;i<n;i++)
			cin >> num[i];

    sort(num,num+n,cmp);

    for(int i=0;i<n;i++)
			cout << num[i] << " ";
		cout << endl;
  }
    
	return 0;
}


a229
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
char parentheses[2*13+1];
int n;

void dfs(int left,int right,int index){ //left左括號數，right右括號數，index括號存放的位置 
  if(left<n)
	{
      parentheses[index]='(';
      dfs(left+1,right,index+1);
  }
  if(right<left)
	{
      parentheses[index]=')';
      dfs(left,right+1,index+1);
  }
  if(right==n){
      parentheses[index]='\0';
      cout << parentheses << endl;
  }
}

int main(int argc, char** argv) {
  while(cin >> n)
	{
      dfs(0,0,0);
      cout << endl;
  }

	return 0;
}


a248
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int a,b,N;
	
	while(cin>>a>>b>>N)
	{
		cout<<a/b<<'.';
		a=a%b;
		
		for(int i=0;i<N;i++)
		{
			a=a*10;
			cout<<a/b;
			a=a%b;
		}
		cout<<endl;
	}
	
	return 0;
}


a263
#include <iostream>
#include <cmath>
using namespace std;

bool is_leap(int y)
{
    if(y%4==0 && y%100!=0 || y%400==0)
        return 1;
    else
        return 0;
}

int main()
{
    int y1,m1,d1,y2,m2,d2;
    int m[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
    while( cin >> y1 >> m1 >> d1 >> y2 >> m2 >> d2)
    {
        int sum1=0,sum2=0;

        for (int i=0;i<y1;i++)
            sum1+=365+is_leap(i);
        for (int i=1;i<m1;i++)
        {
            sum1+=m[i];
            if (i==2 && is_leap(y1))
                sum1++;
        }
        sum1+=d1;

        for (int i=0;i<y2;i++)
            sum2+=365+is_leap(i);
        for (int i=1;i<m2;i++)
        {
            sum2+=m[i];
            if (i==2 && is_leap(y2))
                sum2++;
        }
        sum2+=d2;

        cout << abs(sum2-sum1) <<endl;
    }
    return 0;
}


a291
#include <cstdio>
using namespace std;
int main()
{
    int ans[4],guess[4],n;

    while(scanf("%d %d %d %d",&ans[0],&ans[1],&ans[2],&ans[3])==4)
    {
        scanf("%d",&n);
        while(n--)
        {
            int a=0,b=0,aUsed[4]={0},gUsed[4]={0};

            scanf("%d %d %d %d",&guess[0],&guess[1],&guess[2],&guess[3]);
            for(int i=0;i<4;i++)
                if(guess[i]==ans[i])
                {
                    a++;
                    gUsed[i]=1;
                    aUsed[i]=1;
                }

            for(int i=0;i<4;i++)
                if(!gUsed[i])
                    for(int j=0;j<4;j++)
                        if(guess[i]==ans[j] && !aUsed[j])
                        {
                            b++;
                            gUsed[i]=1;
                            aUsed[j]=1;
                            break;
                        }

            printf("%dA%dB\n",a,b);
        }
    }

    return 0;
}


a410
#include<cstdio>
using namespace std;

main()
{
    double a,b,c,d,e,f;

    while(~scanf("%lf%lf%lf%lf%lf%lf",&a,&b,&c,&d,&e,&f))
    {
        if(a*e==d*b && b*f==e*c) //克拉瑪公式
            printf("Too many\n");
        else if(a*e==d*b && b*f!=e*c)
            printf("No answer\n");
        else
        {
            printf("x=%.2lf\n",(c*e-b*f)/(a*e-d*b));
            printf("y=%.2lf\n",(d*c-a*f)/(b*d-a*e));
        }
    }
    
    return 0;
}


a417
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <cstring>
using namespace std;

int main()
{
    int T,N,M;
    cin >> T;

    while(T--)
    {
        cin >> N >> M;
        int num=1,a[N][N],i=0,j=0;
        memset(a,0,sizeof(a));

        a[i][j]=1;
        while(num < N*N)    //i代表列，j代表欄
        {
            while(j+1<N && a[i][j+1]==0)    //向右
                a[i][++j]=++num;
            while(i+1<N && a[i+1][j]==0)    //向下
                a[++i][j]=++num;
            while(j-1>=0 && a[i][j-1]==0)   //向左
                a[i][--j]=++num;
            while(i-1>=0 && a[i-1][j]==0)   //向右
                a[--i][j]=++num;
        }

/*
        memset(a,0,sizeof(a));
        for(int c=0;c<=N/2;c++) //c為第幾圈，每一圈向右、向下、向左、向上，四個方向填數字
        {
            for (int j=c;j<N-c;j++)             //向右
                a[c][j]=num++;
            for (int i=c+1; i<N-c-1;i++)     	//向下
                a[i][N-c-1]=num++;
            for (int j=N-c-1;j>c;j--)           //向左
                a[N-c-1][j]=num++;
            for (int i=N-c-1;i>c;i--)           //向上
                a[i][c]=num++;
        }
*/

        for(int i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
                cout << setw(5) << (M==1?a[i][j]:a[j][i]);//逆時針即順時針的轉置矩陣
            cout << endl;
        }

    }

    return 0;
}


a524
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n ,pwd[8];
	
	while (cin >> n)
	{
		for (int i=0;i<n;i++)
			pwd[i]=i;
		
		do {
			for (int i=0;i<n;i++)
				cout << n-pwd[i];
			cout << endl;
		}while(next_permutation(pwd,pwd+n));
	}
	
	return 0;
}


a693
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int sum[100001],n,m,from,to,temp;
    
  while(cin >> n >> m)
  {
  	sum[0]=0;
		
		for (int i=1;i<=n;i++)
		{
			cin >> temp;
			sum[i]=sum[i-1]+temp;
		}
    	
   	for (int i=0;i<m;i++)
   	{
   		cin >> from >> to;
			cout << sum[to]-sum[from-1] << endl;
		}		

  }
    
	return 0;
}


a694
#include <iostream>
using namespace std;

int main()
{
    int n,m;
    while(cin >> n >> m)
    {
        int food[501][501];

        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                cin >> food[i][j];

        while(m--)
        {
            int x1,x2,y1,y2,sum=0;
            cin>>x1>>y1>>x2>>y2;

            for(int i=x1;i<=x2;i++)
                for(int j=y1;j<=y2;j++)
                    sum += food[i][j];

            cout << sum << endl;
        }
    }

    return 0;
}


a915
#include <iostream>
#include<vector>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

struct point
{
	int x,y;
};

bool cmp(point a,point b ){
	if (a.x!=b.x)
		return a.x<b.x;
	else
		return a.y<b.y;
}

int main(int argc, char** argv) {

	int n;
	while (cin >> n)
	{
		vector<point> v(n);
		
		for (int i=0;i<n;i++)
			cin >> v[i].x >> v[i].y;
		
		sort(v.begin(),v.end(),cmp);
		
		for (int i=0;i<n;i++)
			cout << v[i].x <<" "<< v[i].y << endl;
	}
	return 0;
}


a982
#include <iostream>
#include <string>
#include <queue>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

char maze[100][100];
int len[100][100]; 

int main(int argc, char** argv) {
	int n;
	cin >> n;
	
	for (int i=0;i<n;i++)
		cin >> maze[i];
	
	for (int i=0;i<n;i++)
		for (int j=0;j<n;j++)
			len[i][j]=-1;
	
	queue< pair<int,int> > Q;
	
  Q.push( {1,1} );
	maze[1][1]='#';
	len[1][1]=1;
	
	while(!Q.empty())
	{
		
		pair<int,int> p=Q.front();
		Q.pop();	
		
		int x=p.first,y=p.second;
		
		if (maze[x+1][y+0]=='.') //向右檢查下一步 
		{
			Q.push({x+1,y+0});			//下一步放入佇列 
			maze[x+1][y+0]='#';			//走過設為牆 
			len[x+1][y+0]=len[x][y]+1;	//長度加1 
		}

		if (maze[x+0][y+1]=='.') //向下 
		{
			Q.push({x+0,y+1});			
			maze[x+0][y+1]='#';
			len[x+0][y+1]=len[x][y]+1;	
		}

		if (maze[x-1][y+0]=='.') //向左 
		{
			Q.push({x-1,y+0});			
			maze[x-1][y+0]='#';
			len[x-1][y+0]=len[x][y]+1;	
		}

		if (maze[x+0][y-1]=='.') //向上 
		{
			Q.push({x+0,y-1});			
			maze[x+0][y-1]='#';
			len[x+0][y-1]=len[x][y]+1;	
		}

	}
	
	if (len[n-2][n-2]==-1)
		cout << "No solution!" << endl; 
	else
		cout << len[n-2][n-2] << endl;
}


b265
#include <iostream>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

int main()
{
	int n;
	while (cin >> n && n!=0)
	{
		map<string,int> m;
		map<string,int>::iterator it;
		int max=0,ans=0;

		for(int i=0;i<n;i++)
		{
			string s[5],code;
			cin >> s[0] >> s[1] >> s[2] >> s[3] >> s[4];
			sort(s,s+5);
			//把課程代號排序後，組成一個大整數，當成map的index
			for(int j=0;j<5;j++)
				code+=s[j];

            m[code]++;
            if(m[code]>max)
                max=m[code];
        }

        for(it=m.begin();it!=m.end();it++)
            if(it->second==max)
                ans+=it->second;

        cout << ans << endl;
    }

    return 0;
}


b373
解一
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
	int n,train[10000];

	while(cin >> n)    
	{
		int ans=0;
		for(int i=0;i<n;i++)
			cin >> train[i];

		for(int i=0;i<n;i++)
			for(int j=0;j<i;j++)
				ans += (train[j]>train[i] ? 1 : 0);

		cout << ans << endl;
	}

	return 0;
}

解二
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
#define N 10000	// TIOJ 1080 N為100000，O(N^2)不會過，要用merge sort或bit 
int array[N],temp[N];
long long ans;

void mergeSort(int l,int r)
{
	if(l<r)
	{
		int mid=(l+r)/2, i=l, j=mid+1, cur=0;
		
		mergeSort(l,mid);
		mergeSort(mid+1,r);

		while(i<=mid && j<=r)
		{
			if (array[i]<array[j])
				temp[cur++]=array[i++];
			else
			{
				temp[cur++]=array[j++];
				ans+=mid-i+1; //array[i]之後的元素個數均是逆序數 
			}
		}
		
		while(i<=mid)
			temp[cur++]=array[i++];
		while(j<=r)
			temp[cur++]=array[j++];
		for(int m=0;m<cur;m++)
			array[l++]=temp[m];

	}
}

int main(int argc, char** argv){
	int n;
   	while(cin >> n)    
	{
		ans=0;
		for(int i=0;i<n;i++)
			cin >> array[i];
	
		mergeSort(0,n-1);
		cout << ans << endl;
	}
	return 0;
}


b759
#include <iostream>
#include <cstring>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) 
{
	char s[1000];
	
	while(cin >> s)
	{
		int len=strlen(s);

		for(int i=0;i<len;i++)
  	{
			for(int j=i;j<len;j++)
				cout << s[j];
			for(int k=0;k<i;k++)
     		cout << s[k];
     	cout << endl;
	 	}
	}
			
	return 0;
}


b836
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
long long n,m;

long long sn(long long item){
	long long an=1+(item-1)*m;
	long long sum=((1+an)*item)/2;
	return sum;
}

int main(int argc, char** argv) {

	while(cin>>n>>m)
	{
		if(n==0) 
			cout << "No Stop!!\n";
		else if(n==1)
			cout << "Go Kevin!!\n";
		else
		{
			long long L=1,R=n,mid;
			while(L<=R)
			{
				mid=(L+R)/2;
				if (sn(mid)==n)
					break;
				else if( sn(mid)<n )
					L=mid+1;
				else
					R=mid-1;
			}

			if(sn(mid)==n) 
				cout << "Go Kevin!!\n";
			else
				cout << "No Stop!!\n";
		}
	}

	return 0;
}


b897
#include <iostream>
#include <cmath>
using namespace std;

int main()
{
    int n,k;
    while(cin >> n >> k)
    {
        double sum = 0;
        k=min(k,n-k);
        for(int i=1;i<=k;i++)
            sum+=log10(n-i+1)-log10(i);

        cout << (int)floor(sum)+1 << endl;
    }

    return 0;
}


b924
#include <iostream>
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n,m;

    while(cin >> n >> m)
    {
        int deg[n+1]={0},a,b,odd=0;

        for(int i=0;i<m;i++)
        {
            cin >> a >> b;
            deg[a]++;
            deg[b]++;
        }

        for(int i=1;i<=n;i++)
            if(deg[i]%2==1)
                odd++;

        cout << (odd > 0 && odd != 2 ? "NO":"YES") << endl;
    }
    return 0;
}


b938
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

struct node
{
    int data;
    node *next;
};

node *a[1000005];

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n,m,d;

    while(cin >> n >> m)
    {
        memset(a,0,sizeof(a));

        for(int i=1;i<=n;i++)
        {
            node *new_node=new node;
            new_node->data=i;
            new_node->next=NULL;
            a[i]=new_node;
            if (i>=2)
                a[i-1]->next=new_node; //前一個連後一個
        }

        for (int i=1;i<=m;i++)
        {
            cin >> d;
            if (a[d]==NULL || d==n || a[d]->next==NULL) //已殺，最後一個，剩最後一個
                cout << "0u0 ...... ?\n";
            else
            {
                node *next_node=a[d]->next;
                cout << a[d]->next->data << endl; //或cout << next_node->data << endl;
                a[d]->next=a[d]->next->next;
                a[next_node->data]=NULL;
//                delete next_node;
            }
        }

/*        
        node *ptr=a[1],*del_ptr;
        while(ptr!=NULL)
        {
            del_ptr=ptr;
            ptr=ptr->next;
            delete del_ptr;
        }
*/
    }

    return 0;
}


c435
#include <iostream>
using namespace std;

int main()
{
    int n;
    while(cin >> n)
    {
        int a[n],ma,ans;
        for (int i=0;i<n;i++)
            cin >> a[i];

        ma=a[0];
        ans=a[0]-a[1];

        for (int i=2;i<n;i++)
        {
            ans=max(ans,ma-a[i]);
            ma=max(ma,a[i]);
        }

        cout << ans << endl;
    }

    return 0;
}


d010
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,sum;
  
 	while(cin >> n){
    sum=0;
    for(int i=1;i<n;i++)
    	if(n%i==0)
				sum+=i;
        
		if(sum>n)
			cout << "盈數" << endl;
        else if(sum<n)
			cout << "虧數" << endl;
        else 
			cout << "完全數" <<endl;
  }
	return 0;
}


d016
#include <iostream>
#include <sstream>
#include <string>
#include <stack>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  string line,word;
  int num,x,y;
  stack<int> sta;

  while( getline(cin,line) )
	{
		stringstream iss(line);
		while( iss >> word)
		{
			switch(word[0])
			{
				case '+':
					y=sta.top();
					sta.pop();
					x=sta.top();
					sta.pop();
					sta.push(x+y);
					break;
				case '-':
					y=sta.top();
					sta.pop();
					x=sta.top();
					sta.pop();
					sta.push(x-y);
          break;
        case '*':
					y=sta.top();
					sta.pop();
					x=sta.top();
					sta.pop();
					sta.push(x*y);
					break;
				case '/':
					y=sta.top();
					sta.pop();
					x=sta.top();
					sta.pop();
					sta.push(x/y);
					break;
				case '%':
					y=sta.top();
					sta.pop();
					x=sta.top();
					sta.pop();
					sta.push(x%y);
					break;
				default:
					stringstream in(word);
					in>>num;
					sta.push(num);
			}

		}
		
		cout<<sta.top()<<endl;
	}

	return 0;
}


d018
#include <iostream>
#include <sstream>

using namespace std;

int main()
{
    string s;
    while(getline(cin,s))
    {
        double sum[2]={0},num;
        int idx;
        char colon;

        stringstream ss(s);
        while( ss >> idx >> colon >> num )
            sum[idx&1]+=num;

        cout << sum[1]-sum[0] << endl;
    }

    return 0;
}


d049
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int y;

	while(cin >> y)
	{
		cout << y-1911 << endl;
	}

	return 0;
}


d050
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int h;
	
	while(cin >> h)
	{

		if(h>=15)
		{
			cout << h-15 << endl;	
		}
		else
		{
			cout << h-15+24 << endl;	
		}
		
	}	

	return 0;
}

#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 
	int t;
	
	while(cin >> t)
	{
		cout << (t+9)%24 << endl;
	}

	return 0;
}


d051
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {
	
  double f,c;
	
	while(cin >> f)
	{
		c = (f-32)*5/9;
		cout << fixed << setprecision(3) << c << endl;
	}	
	
	return 0;
}


d058
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 
	int n;
	
	while(cin >> n)
	{
		
		if(n>0)
		{
			cout << 1 << endl;
		}
		else
		{
			if(n==0)
			{
				cout << 0 << endl;
			}
			else
			{
				cout << -1 << endl;
			}
			
		}
	}
 
	return 0;
}


d060
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int m,ans;
	
	while(cin >> m)
	{
		ans=m<=25?25-m:85-m;
		cout << ans << endl;
	}	

	return 0;
}


d063
#include <iostream>

using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) 
{
	int n;
	while(cin >> n)
	{	
		if(n==1)
			cout << 0 << endl;
		else
			cout << 1 << endl;
	}
			
	return 0;
}


d064
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int i;
	
	while(cin >> i)
	{

		if(i%2==1)
		{
			cout << "Odd" << endl;	
		}
		else
		{
			cout << "Even" << endl;	
		}
		
	}	
	
	return 0;
}


d065
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 
	int a,b,c;
	
	while(cin >> a >> b >> c)
	{
		
		if(a>b && a>c)
		{
			cout << a << endl;
		}
		else if(b>a && b>c)
		{
			cout << b << endl;
		}
		else
		{
			cout << c << endl;	
		}
				
	}
 
	return 0;
}


d066
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
 	int h,m,sum;
    
  while (cin >> h >>m)
	{
		sum=60*h+m;
    if(sum>=450 && sum<1020)
      cout << "At School" << endl;
    else
			cout << "Off School"<<endl;
  }    
	
	return 0;
}


d073
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n,ans;
	
	while(cin >> n)
	{
		ans = (n%3==0) ? (n/3) : (n/3+1);

	}	

	cout << (n-1)/3+1 << endl;
	
	return 0;
}


d074
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int i,n,p,max=0;
	
	cin >> n;
	
	for(i=0;i<n;i++) 
	{
		cin >> p;
		if(p>max)
		{
			max=p;
		}
	}
	cout << max;	
	
	return 0;
}


d086
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    char word[201];
    
    while(cin >> word)
    {
        int sum=0;
	bool fail=false;

        if(word[0]=='0' && word[1]=='\0')
        	break;

        for(int i=0;i<strlen(word);i++)
        {
	    if(isalpha(word[i]))
                sum+=toupper(word[i])-64;
            else
            {
                fail=true;
                break;
            }
        }

        if(!fail)
            cout << sum << endl;
        else 
	    cout << "Fail" << endl;
    }

    return 0;
}


d098
#include <iostream>
#include <sstream>
#include <cstdlib>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool isAllDigit(string str)
{

	for(int i=0;i<str.length();i++)
	{
		if(!isdigit(str[i])) //如果有一個不是數字就傳回false
		{
			return false;
		}
	}
	
	return true; //全部為數字就傳回true 
}

int main(int argc, char** argv) {

	string input;

	while(getline(cin,input))
	{
		int sum=0;
		stringstream wholeline(input);

		while(wholeline)
		{
			string word;
			wholeline >> word;	//以空白為區隔讀一個單字 

			if(isAllDigit(word))
			{
				sum += atoi(word.c_str()); 
				//atoi()			將字元陣列轉整數 
				//string.c_str() 	將string轉字元陣列
			}
		}

		cout<<sum<<endl;
	}
	
	return 0;
}

#include <iostream>
#include <sstream>
#include <cstdlib>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool isAllDigit(string str)
{
	for(int i=0;i<str.length();i++)
	{
		if(!isdigit(str[i])) //如果有一個不是數字就傳回false
		{
			return false;
		}
	}
	return true; //全部為數字就傳回true 
}

#include <iostream>
#include <sstream>
#include <cstdlib>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool isAllDigit(string str)
{
	for(int i=0;i<str.length();i++)
	{
		if(!isdigit(str[i])) //如果有一個不是數字就傳回false
		{
			return false;
		}
	}
	return true; //全部為數字就傳回true 
}

int main(int argc, char** argv) {

	string input;

	while(getline(cin,input))
	{
		int sum=0;
		stringstream ssline(input);

		while(ssline)
		{
			string word;
			ssline >> word;	//以空白為區隔讀一個單字 

			if(isAllDigit(word))
			{
        //sum += atoi(word.c_str()); 
				//atoi() 將字元陣列轉整數。string.c_str() 	將string轉字元陣列
				stringstream ss;
				int num=0; //word空白isAllDigit會傳回true 
				ss << word;
				ss >> num;
				sum+=num;

			}
		}

		cout<<sum<<endl;
	}
	
	return 0;
}


d115
#include <iostream>
#include <algorithm>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
int n,m,num[100],ans[100];

void next(int nowStep, int start) //nowStep表示目前取到第幾個。num[start]為要開始取的數字。 
{
	
  if(nowStep==m)
	{
		for(int i=0;i<m;i++)
			cout << ans[i] << " ";
		cout << endl;
	}
	else
	{
		for(int i=start;i<n;i++) 
    {
			ans[nowStep]=num[i];
			next(nowStep+1,i+1);
		}
	}
  
}

int main(int argc, char** argv) {

	while(cin >> n && n!=0)
	{
		for(int i=0;i<n;i++)
			cin >> num[i];
		
		cin >> m;

		sort(num,num+n);
		next(0,0);
		cout << endl;
	}
	
	return 0;
}

d122
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
  long long int i,n,ans;
    
	while(cin>>n)
	{
     ans = 0;
     for(i=5; i<=n; i=i*5)//計算5的因次 
        ans=ans+n/i;

     cout << ans << endl;
  }

	return 0;
}


d124
#include <iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char n[10000];
    
  while (cin >>n){
    int sum=0;
          
    for (int i=0;i<strlen(n);i++ )
      sum=sum+n[i]-'0';	//'-'=45，'0'=48

    cout <<(sum%3==0?"yes":"no")<<endl;
  }
	return 0;
}


d212
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
	
	int n;
	unsigned long long int f[100]={1,1}; //ussigned lon long int只能到f[92]
	
	for(int i=2;i<100;i++)
		f[i]=f[i-1]+f[i-2];

	while(cin >> n)
        cout << f[n] << endl;
			
	return 0;
}


d244
#include <iostream>
#include <algorithm>
#include <map>
#include <sstream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  string line,no;
	map<string,int> rock;
    
	while(getline(cin,line)){

    rock.clear();
    stringstream ss(line);

    while(ss >> no){
       rock[no]++;
    }

//  for(map<string,int>::iterator it=rock.begin();it!=rock.end();it++)        
    for(auto it=rock.begin();it!=rock.end();it++)
		{
      if(it->second==2)
			{
         cout << it->first << endl;
         break;
      }
    }
  }
	return 0;
}


d277
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n;
    
  while (cin >>n)
	{
    cout <<(n%2 ==0 ?n :n-1 ) <<endl;
  }
	
	return 0;
}


d392
#include <iostream>
#include <sstream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {

	string input;
  while (getline(cin,input))
	{
    stringstream ss(input);
		long long int sum=0,n;

    while (ss>>n){
      sum+=n;
    }
    cout << sum << endl;
  }	
	
  return 0;
}

#include <iostream>
#include <sstream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	char input[10000];
	
  while (cin.getline(input,sizeof(input)))
	{
    stringstream ss;
    ss << input; 
		long long int sum=0,n;

    while (ss>>n){
      sum+=n;
    }
    cout << sum << endl;
  }
  	
	return 0;
}

d460
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a;

	while(cin >> a ) 
	{
	
		if(a<=5)
		{ 
			cout << 0 << endl;
		}
		else if(a<=11)
		{
			cout << 590 << endl;
		}
		else if(a<=17)
		{
			cout << 790 << endl;
		}
		else if(a<=59)
		{
			cout << 890 << endl;
		}
		else
		{
			cout << 399 << endl;
		}
		
	}

	return 0;
}


d461
#include <iostream>

using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	
	int n;
	
	
	while(cin >> n){
		cout << n-1 << endl;
	}
	return 0;
}


d478
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
    int x[10000],y[10000],n,m,i,j,ans;
    
    cin >> n >> m;
    for(int a=0;a<n;a++)
    {

        for(int b=0;b<m;b++)
		cin >> x[b];

        for(int b=0;b<m;b++)
		cin >> y[b];

        i=j=ans=0;
        
        while( i<m && j<m )
	{
           if(x[i]<y[j])
		i++;
           else if(x[i]>y[j])
		j++;
           else
	   {
		i++;
		j++;
		ans++;
	   }
        }
        cout << ans <<endl;
    }

    return 0;
}


d483
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	cout << "hello, world";
	
	return 0;
}


d485
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
 	int a,b;
    
  while (cin >>a >>b)
	{
		a=a+a%2;
		b=b-b%2;
    cout <<(b-a)/2+1 <<endl;
  }
	
	return 0;
}


d489
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) 
{
	int a,b,c,s; 
	
	while(cin >> a >> b >>c)
	{
		s=(a+b+c)/2;
		cout << s*(s-a)*(s-b)*(s-c) << endl;
	}

	return 0;
}


d490
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a,b;
	while(cin>>a>>b)
	{
		int sum=0;
		for(int i=a;i<=b;i++)
		{
			if(i%2==0)
			{
				sum+=i;
			}
		}
		cout<<sum;
	}
	
	return 0;
}


d498
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n;
   
    while(cin >> n)
    {
        for(int i=0;i<n;i++)
            cout << "I don't say swear words!\n";
    }
	return 0;
}


d507
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 	int a,b,c;
	while(cin >> a >> b >> c)
	{
		if(a<b) swap(a,b);
		if(a<c) swap(a,c);
		if(a*a-b*b>c*c) 
			cout << "obtuse triangle" << endl;
		else if(a*a-b*b==c*c) 
			cout << "right triangle" << endl;
		else 
			cout << "acute triangle" << endl;
	}

	return 0;
}


d562
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,a[100];
  while(cin >> n)
	{
    for(int i=0;i<n;i++) 
			cin >> a[i];
        
		int l=0,r=n-1;
  
    for(int i=0;i<n;i++)
  	{
  
      if(i%2==0)
			{
        for(int i=l;i<=r;i++)
					cout << a[i] << " ";
        l++;
      }
			else 
			{
        for(int i=r;i>=l;i--)
					cout << a[i] << " ";
        r--;
      }
			cout << endl; 
  
    }
    cout << endl;
  
  }    
	
	return 0;
}
   

d563
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n;
	while(cin >> n)
	{
		int x[n];
		for(int i=0;i<n;i++)
			cin >> x[i];
	    
		int i=0,j=n-2,prefix=0,suffix=x[n-1],ans=1;
	  while(i<n && j>=0)
		{
     	if(prefix==suffix)
			{
				ans++;
				prefix+=x[i++];
				suffix+=x[j--];
     	}
     	else if (prefix < suffix)
       	prefix+=x[i++];
     	else
				suffix+=x[j--];
    }
    cout << ans << endl;
	}

	return 0;
}


d574
#include <iostream>
#include <sstream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;


int main(int argc, char** argv) {
	int n;
	while(cin >> n)
	{
		string in,out;
		int count=1;
		cin>>in;

		for(int i=0;i<n;i++)
		{
			if(in[i]==in[i+1])
				count++;
			else
			{
				stringstream ss;
				string s;

				ss << count;
				ss >> s; 

				out+=s;
				out+=in[i];
				count=1;
			}
		}

		if(out.size()<n)
			cout << out << endl;
		else
			cout << in << endl;
	}
   
	return 0;
}

    
d511
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a,b,c,ans=0;
    
	for(int i=0;i<5;i++)
	{
    cin >> a >> b >> c;
    if(a+b>c && b+c>a && c+a>b)
			ans++;
  }
	
	cout <<ans; 
	return 0;
}


d526
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
struct node
{
	int data;
	node *left, *right;
};

void preorder(node *ptr)
{
	if(ptr!=NULL)
	{
		cout << ptr->data << " ";
		preorder(ptr->left);
		preorder(ptr->right);
	}
}

void deleteTree(node *ptr)
{
	if(ptr!=NULL)
	{
		deleteTree(ptr->left);
		deleteTree(ptr->right);
		delete ptr;
	}
}

int main(int argc, char** argv) {

	int n,value;
	node *head, *ptr;

	while(cin >> n)
	{
		head=new node;	//第一個 
		cin >> value;
		head->data=value;
		head->left=NULL;
		head->right=NULL;
        
		for(int i=1;i<n;i++)	//第二個以後 
		{
			cin >> value;
			node *new_node = new node;
			new_node->data = value;
			new_node->left = NULL;
			new_node->right = NULL;
            
			ptr=head;	//從頭開始搜尋要加入的位置 

			while(1)
			{
				if(value < ptr->data)
				{
					if(ptr->left!=NULL)
						ptr=ptr->left;
					else
					{ 
						ptr->left=new_node;
						break;
					}
				}
				else
				{
					if(ptr->right!=NULL)
						ptr=ptr->right;
					else
					{
						ptr->right=new_node;
						break;
					}
				}
			}
		}
        
		preorder(head);
		cout << endl;
		deleteTree(head);
	}

	return 0;
}


d555
#include <iostream>
#include <vector>
#include <stack>
#include <cstdlib>
#include <algorithm>
using namespace std;

struct point
{
	int x,y;
};

bool cmp(point a,point b)
{
    if(a.x!=b.x)
        return a.x>b.x; //x 大->小
    else
        return a.y>b.y; //y 大->小
}

int main()
{
    int N,Case=1;
    while(cin >> N)
    {
        vector<point> v;
        stack<point> ans;
        v.resize(N);

        for(point &p:v)
            cin >> p.x >> p.y;

        sort(v.begin(),v.end(),cmp);

        int maxY=v[0].y-1;  //maxY記錄極大點中y的最大值

        for(point &p:v)
            if(p.y>maxY)
            {
                maxY=p.y;
                ans.push(p);
            }

        printf("Case %d:\n",Case++);
        printf("Dominate Point: %d\n",ans.size());
        while(!ans.empty())
        {
            point p=ans.top();
            ans.pop();
            printf("(%d,%d)\n",p.x,p.y);
        }
    }

    return 0;
}


d587
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    int n;
    while(cin >> n)
    {
    	int x,num[4] = {0};
    	
		for(int i=0;i<n;i++)
    	{
        	cin >> x;
        	num[x]++;
    	}

	    for(int i=1;i<=3;i++)
        	for(int j=0;j<num[i];j++)
            	cout << i << " ";
        cout << endl;
	}
	
	return 0;
}


d626
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int n;
char paint[100][101];

void dfs(int x,int y)
{
    paint[x][y]='+';
    if(x<n-1 && paint[x+1][y]=='-')//右 
		  dfs(x+1,y);
    if(y<n-1 && paint[x][y+1]=='-')//下 
		  dfs(x,y+1);
    if(x>0 && paint[x-1][y]=='-')//左 
		  dfs(x-1,y);
    if(y>0 && paint[x][y-1]=='-')//上 
		  dfs(x,y-1);
}

int main(int argc, char** argv) {
	
  while(cin >> n)
  {
    	int x,y;
	
      for(int i=0;i<n;i++)
			 cin >> paint[i];
    	
		  cin >> x >> y;
    	
		  dfs(x,y);
    	
		  for(int i=0;i<n;i++)
			 cout << paint[i] << endl;
    	
	}
	return 0;
}



d637
#include<iostream>
#include<cstring>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
#define N 10000 //飼料數
#define M 100   //胃容量（背包容量）
long long int dp[N+1][M+1], s[N], v[N]; //s[i]每顆飼料的體積，v[i]每個飼料的飽足感

int main(int argc, char** argv) {

	int a,b,n;
	
	while (cin >> n ) {
			
		memset(dp,0,sizeof(dp));		
		for (int i=1; i<=n; i++)
			cin >> s[i] >> v[i];
				
		for (int i=1; i<=n; i++) 		//對每一顆飼料考慮要不要吃
			for (int j=1; j<=M; j++)  	//考慮胃容量大小
				if (s[i]>j) 			//如果第i顆飼料體積太大，吃不下去，維持一樣的飽足感(價值) 
					dp[i][j]=dp[i-1][j]; 
				else 					
					dp[i][j]=max(dp[i-1][j],dp[i-1][j-s[i]]+v[i]);
					//吃得下第i顆飼料，此胃容量的飽足感(價值)為max(不吃i時的飽足感 , 吃 i的飽足感+胃容量扣 i時的飽足感)

		cout << dp[n][M] << endl;
	}	

  return 0;
}


d649
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int i,j,n;
    
  while(cin>>n)
  {
    for(i=1;i<=n;i++)
    {
      for (j=0;j<n-i;j++)
      {
        cout<< "_";
      }
    
      for (j=0;j<i;j++)
      {
        cout<< "+";
      }
      cout<<endl;
	  }
  }
  
  return 0;
}


d693
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

long long int gcd(long long int a,long long int b){
    if(b==0)
		return a;
    else 
		return gcd(b,a%b);
}

int main(int argc, char** argv) {
	
	int n,num[10];
  long long int lcm;
    
	while(cin>>n && n)
	{
    cin>>num[0];
		lcm=num[0];
  
    for(int i=1;i<n;i++)
		{
      cin>>num[i];
      lcm=lcm*num[i]/gcd(lcm,num[i]);
    }
  
    cout<<lcm<<endl;
  }
	return 0;
}


d732
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int binary_search(int num[], int len, int target){
	int left=0,right=len-1,mid=0;
	
	while(left <= right)
	{
		mid = (left + right) / 2;
		if(target > num[mid])
			left=mid+1;
		else if(target<num[mid])
			right=mid-1;
		else
			return mid+1;
	}
  
	return 0;
}

int main(int argc, char** argv) {

	int n,k,i;
	cin>>n>>k;
	int num[n],query;
	
	for(i=0;i<n;i++)
		cin>>num[i];
	
	for(i=0;i<k;i++)
	{
		cin>>query;
		cout << binary_search(num,n,query) << endl;
	}

	return 0;
}


d827
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n;
	
	while(cin >> n)
	{
		cout << (n/12)*50+(n%12)*5 << endl;
	}	
	
	return 0;
}


d881
#include <iostream>
using namespace std;

int main(int argc, char** argv) {

	int d;
	
	while(cin >> d)
	{
		int sum=0,ap=1,diff=1;
		for (int i=0;i<50;i++)
		{
			sum+=ap;
			ap+=diff;
			diff+=d;
		}
		cout << sum << endl;
	}
	
	return 0;
}


d984
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
 
	unsigned int a,b,c;
	
	while(cin >> a >> b >> c)
	{

		if( a>b+c || c>a && a>b && a+b>c || b>a && a>c && a+c>b) 
		{
			cout << "A" << endl;
		}
		else if(b>a+c || c>b && b>a && b+a>c || a>b && b>c && b+c>a)
		{
			cout << "B" << endl;
		}
		else
		{
			cout << "C" << endl;
		}
	}
 
	return 0;
}

-------------------------競賽題庫

a240
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n,m,de=1,sum[170001]={0};
	
	for(int i=1;i<=170000;i++)
	{
		de=de*10;
		sum[i]=sum[i-1]+de/17;
		de=de%17;
	}
	
	cin>>m;
	for(int i=0;i<m;i++)
	{
		cin>>n;
		cout<<sum[n]-sum[n-1]<<" "<<sum[n]<<endl;
	}
  
	return 0;
}


a241
#include <iostream>
using namespace std;

bool check(int i){
  while((i&1)==0)
    i>>=1;
    
/*	
  會TLE 
	while(i%2==0)
		i/=2;
*/
  while(i%5==0)
		i/=5;
    
	if(i>1)
		return false;
	else
    	return true;
}

int main(int argc, char** argv) {
	int m;
	cin >> m;
  while(m--)
	{
    int n,sum=0;
    cin >> n;

    for(int i=2;i<=n;i++)
      if(check(i)) //x的質因數限定只能是2或5 
        sum++;

    cout << sum << endl;
  }
    
  return 0;
}


#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int m,n,f,x[200],size=0;
    
	for(int i=0;i<=27;i++)	//100000000<2^27
	{
        f=1<<i;				//f=2^i;
        for(int j=f;j<=100000000;j*=5)
        	x[size++]=j;
  }

	sort(x,x+size);
    cin >> m;
	
	while(m--){
		int ans=0;
    cin >> n;

    for(int i=1;i<size;i++)
      if (x[i]<=n)
        ans++;

		cout << ans << endl;
  }
	return 0;
}


a251
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char** argv) {
	int T;

	cin >> T;
	while(T--)
	{
		int N;
		cin >> N;
		
		int f[N+1];
		cin >> f[1] >> f[2] >> f[3] >> f[4];
		
		for (int i=5;i<=N;i++)
			f[i]=f[i-1]+f[i-4];

		sort(f+1,f+N+1);
	
		cout << f[N/2+1] << endl;

	}

	return 0;
}


a252
#include <iostream>
#include <cstring>
using namespace std;
int main()
{
    string s1,s2,s3;
    int lcs[101][101][101]; //lcs[i][j][k]代表取s1長度為i、s2長度為j、s3長度為k的最長共同字串
    memset(lcs,0,sizeof(lcs));

    cin >> s1 >> s2 >> s3;
    for(int i=1;i<=s1.size();i++)
        for(int j=1;j<=s2.size();j++)
            for(int k=1;k<=s3.size();k++)
                if((s1[i-1]==s2[j-1])&&(s2[j-1]==s3[k-1]))
                   lcs[i][j][k]=lcs[i-1][j-1][k-1]+1;
                    //若s1的第i-1個字元、s2的第j-1個字元、s3的第k-1個字元都相同，則lcs[i][j][k]+1
                else
                    lcs[i][j][k]=max(max(lcs[i-1][j][k],lcs[i][j-1][k]),lcs[i][j][k-1]);
                    //若s1的第i-1個字元、s2的第j-1個字元、s3的第k-1個字元有一個不相同，則選三個字串長度少一的最大

    cout << lcs[s1.size()][s2.size()][s3.size()] << endl;
    return 0;
}


a362
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

struct statue
{
	int h,w,id;
}s[10000];

bool cmp(statue a,statue b){
    
	if (a.h!=b.h)
		return a.h<b.h;
	
	if (a.w!=b.w)
		return a.w<b.w;
    
	return a.id<b.id;
    
}

int main(int argc, char** argv) {
	
    int n,ans=0;
    
	cin >> n;
    for(int i=0;i<n;i++){
        cin >> s[i].h >> s[i].w;
        s[i].id=i;
    }
    
	sort(s,s+n,cmp);
    
	for(int i=0;i<n;i++)
		ans+=abs(i-s[i].id);
    
	cout << ans << endl;
	
	return 0;
}


a364
#include <iostream>

using namespace std;

int main()
{
    int T,n;
    cin >> T;
    while (T--)
    {
        cin >> n;
        for (int a=1;a<500;a++)
            for (int b=0;b<a;b++)
                for (int c=0;c<b;c++)
                    if (a*(a-1)*(a-2)/6+b*(b-1)/2+c==n)
                    {
                        cout << a << b << c << endl;
                        break;
                    }
    }

    return 0;
}


a480
#include<iostream>
#include<algorithm>
using namespace std;

struct city
{
    int d1,d2;
}c[1000000];

bool cmp(city i,city j)
{
    return i.d1 < j.d1;
}

int main()
{
    int n,x1,x2,y1,y2,x,y;

    while (cin >> x1 >> y1 >> x2 >> y2)
    {
        cin >> n;
        for(int i=0;i<n;i++)
        {
            cin >> x >> y;
            c[i].d1=(x-x1)*(x-x1)+(y-y1)*(y-y1);
            c[i].d2=(x-x2)*(x-x2)+(y-y2)*(y-y2);
        }

        sort(c,c+n,cmp);        //先對d1排序，小->大

        for(int i=n-2;i>=0;i--)
            c[i].d2=max(c[i].d2,c[i+1].d2); //預處理，將c[i].d2設為c[i+1]~c[i+n-1] d2的最大值。

        int p=min(c[n-1].d1,c[0].d2);

        for(int i=0;i<n-1;i++)
            p=min(p,c[i].d1+c[i+1].d2); //窮舉 p = c[i].d1(i城市與導彈1的距離) + max(c[i+k].d2),k>=1(其它城市與導彈2的最大距離)

        cout << p << endl;;
    }
    return 0;
}


a565
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int n;
	char c;
	scanf("%d\n",&n);
	
	while(n--)
	{
		int p=0,pair=0;

		while(1)
		{
			c=getchar();
			if(c=='\n')
				break;
				
			if(c=='p')
				p++;
			else if(c=='q' && p>0)
			{
				p--;
				pair++;
			}
		}
		
		cout << pair << endl;
	}
	return 0;
}


a583
#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;
int main()
{
    struct point{
        int x,y;
    }p[20];

    int n,m,dist,minD;

    while(cin >> n >> m)
    {
        minD=0x7fffffff;
        for(int i=0;i<m;i++)
        {
            cin >> p[i].x >> p[i].y;
            for(int j=i-1;j>=0;j--)
            {
                dist=pow(p[i].x-p[j].x,2)+pow(p[i].y-p[j].y,2);
                minD=min(dist,minD);
            }
        }
        printf("%.4f\n",sqrt(minD));
    }

    return 0;
}


a584
#include <iostream>
#include <sstream>
#include <map>
using namespace std;

int main()
{
    map<string, string> father;     //f(ather)--父節點
    int n,fLen,sLen;                //到根結點的長度
    string f,s,fPath[50],sPath[50]; //記錄往上回溯至根目結點經過的結點

    cin >> n;
    cin.ignore();

    while(n--)
    {
        string line,dad,son;
        getline(cin,line);
        stringstream ss(line);

        ss >> dad;
        while(ss >> son)
            father[son]=dad;
    }

    cin >> f >> s;
    for(fLen=0; f!=""; f=father[f]) //向上回溯至根
        fPath[fLen++]=f;
    for(sLen=0; s!=""; s=father[s])
        sPath[sLen++]=s;
    while(fPath[fLen-1]==sPath[sLen-1])  //扣掉相同的祖先
    {
        fLen--;
        sLen--;
    }

    cout << fLen+sLen << endl;
}


a623
#include<iostream>
using namespace std;

int f(int n)
{
	int sum=1;
	for(int i=1;i<=n;i++)
	{
		sum*=i;
	}
	return sum;
}

int main(int argc, char** argv) {

 	int n,m;
 	
 	while(cin>>n>>m)
 	{
		cout << f(n)/( f(m)*f(n-m))<<endl;
 	}
  return 0;
}


a782
#include <iostream>
#include <cstring>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	char line[81];
	int last;	
	while (cin.getline(line,80))
	{
		if(strcmp(line,"END")==0)
			break ;

		cout << (char)toupper(line[0]);
		
		for (int i=1;i<strlen(line);i++)
		{
			if (line[i]==' ')
			{
				cout << (char)toupper(line[i+1]);
				last=i+1;
			}
		}
		
		cout << " ";
		for (int i=last;line[i]!='\0';i++)
			cout << line[i];
		cout << endl;
		
	} 

}


a821
#include <iostream>
#include <map>
#include <set>
using namespace std;

int main()
{
    int n,r;
    while (cin >> n >> r)
    {
        string s1,s2;
        map<string, set<string> > m;
        set<string> defeated;

        for (int i=0;i<r;i++)
        {
            cin >> s1 >> s2;;
            m[s1].insert(s2);
            defeated.insert(s2);
        }

        for (auto &x:m)
            if (x.second.size()==n-1 && defeated.find(x.first)==defeated.end() )
                cout << x.first << endl;
    }

    return 0;
}


a824
#include <iostream>
using namespace std;

int main()
{
    int a,b,c,sum;

    while(cin >> a >> b >> c)
    {
        sum=0;
        for(int i=1;i<=c;i++)
            if(i%a==0 || i%b==0)
                sum+=i;

        sum=sum%26-1;
        cout << char('A'+sum) << endl;
    }

    return 0;
}


a861
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int h,w;

	while(cin >> h >> w)
	{
		cout << 2*h+2*w << endl;
	}
	

	return 0;
}


a865
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	char s[1000];
	int sum,num[26]={1,2,600,4,5,500,3,9,10,0,20,30,40,50,70,80,90,100,200,300,400,0,800,60,8,7};
	
	while(cin >> s)
	{
		sum=0;
		
		if(s[0]=='.')
			break;

		for(int i=0;i<strlen(s);i++)
		{
			if(s[i]>='A' && s[i]<='Z')
				sum+=num[s[i]-'A'];
			else if(s[i]=='#')
				sum+=6;
			else if(s[i]=='$')
				sum+=700;
			else if(s[i]=='3')
				sum+=900; 
		}
		cout << sum << endl;
	}
	
	return 0;
}


a870
#include <iostream>
#include <algorithm> //find
#include <list>
using namespace std;

int main()
{
    list<string> lst;
    string cmd,X,N;
    while(cin >> cmd)
    {
        if(cmd=="ADD")
        {
            cin >> X;
            lst.push_back(X);
        }
        else if(cmd=="INSERT")
        {
            cin >> X >> N;
            //list<string>::iterator it=find(lst.begin(),lst.end(),N);
            auto it=find(lst.begin(),lst.end(),N);
            lst.insert(it,X);
        }
        else if(cmd=="REMOVE")
        {
            cin >> X;
            auto it=find(lst.begin(),lst.end(),X);
            lst.erase(it);
        }
        else
        {
            for (auto x:lst)
                cout << x << " ";
            cout << endl;
        }
    }

    return 0;
}


a874
#include <iostream>
using namespace std;

int main()
{
    int N;
    while(cin >> N)
    {
        int d[26][26],w;
        char x,y;

        for(int i=0;i<26;i++)
        {
            for(int j=0;j<26;j++)
                d[i][j]=0x3f3f3f3f;
            d[i][i]=0;
        }

        for(int i=0;i<N;i++)
        {
            cin >> x >> y >> w;
            d[x-'A'][y-'A']=d[y-'A'][x-'A']=w;
        }

        for(int k=0;k<26;k++)
            for(int i=0;i<26;i++)
                for(int j=0;j<26;j++)
                    d[i][j]=min(d[i][j],d[i][k]+d[k][j]);

        cin >> x >> y;
        if (d[x-'A'][y-'A']!=0x3f3f3f3f)
            cout << d[x-'A'][y-'A'] << endl;
        else
            cout << "NoRoute" << endl;
    }

    return 0;
}


b003
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
    int k;
    while(cin >> k)
    {
        k=abs(k);
        for(int n=(int)sqrt(k); ;n++)
            if( n*(n+1)/2>=k && (k-n*(n+1)/2)%2==0 )
            {
                cout << n << endl;
                break;
            }
    }

    return 0;
}


b004
#include<iostream>
#include<cstdio>
#include<cmath>
using namespace std;

int main()
{
   double D,L,area;
   const double PI = 2*acos(0);
   
   while(cin>>D>>L)
   {
       double area=PI*(L/2)*sqrt((L/2*L/2)-(D/2*D/2));  //長邊L/2，短邊sqrt( (L/2*L/2)-(D/2*D/2))。橢圓面積pi*長邊*短邊
       printf("%.3f\n",area);
   }
}


b005
#include <iostream>
#include <vector>
using namespace std;
int main()
{
    int n;
    while(cin >> n)
    {
        int m[n+1][n+1]={0};
        vector<int> row,col;

        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                cin >> m[i][j];

        for(int i=1;i<=n;i++)
        {
            int sum=0;
            for(int j=1;j<=n;j++)
                sum+=m[i][j];
            if(sum%2==1)
                row.push_back(i);
        }

        for(int j=1;j<=n;j++)
        {
            int sum=0;
            for(int i=1;i<=n;i++)
                sum+=m[i][j];
            if(sum%2==1)
                col.push_back(j);
        }

        if(row.empty() && col.empty())
            cout << "OK" << endl;
        else if(row.size()==1 && col.size()==1)
            cout << "Change bit (" << row[0] << "," << col[0] << ")" << endl;
        else
            cout << "Corrupt" << endl;
    }

    return 0;
}


b051
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool cmp(string s1,string s2)
{
    return s1+s2>s2+s1;
}

int main()
{
    int n;
    while(cin>>n)
    {
        vector <string> v(n);
        string s;

        for(string &x:v)
            cin >> x;

        sort(v.begin(),v.end(),cmp);

        for(string x:v)
            cout << x;
        cout << endl;
    }

    return 0;
}


b062
#include <iostream>
#include <cstring>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int main(int argc, char** argv) {
	int n,map[51][32][32],ci,cj,N;
	string s;
  
	while (cin >> n)
	{
		memset(map,0,sizeof(map));
    	
		for(int i=0;i<n;i++)	//建立相鄰矩陣 
		{   
			cin >> s;
			for(int j=0;j<s.length();j++)
				map[1][i][j]=s[j]-'0';                                                          
		}
    
		cin >> ci >> cj >> N;
		
		for(int m=2;m<=N;m++)
			for(int i=0;i<n;i++)
				for(int j=0;j<n;j++)
					for(int k=0;k<n;k++)
						if (map[1][i][k]==1)		//i->j路徑長度為m的走法，為所有 i->k(直接連通) k->j(路徑長度m-1)的總和  
							map[m][i][j]+=map[m-1][k][j];      

		int ans=0;
		for(int i=1;i<=N;i++)	//加總ci~cj 路徑長度為1~N的可能走法 
			ans+=map[i][ci-1][cj-1];

		cout << ans << endl;     
	}
	
	return 0;
}


b108
#include <iostream>
#include <algorithm>
#include <vector>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

vector<int> node[10000];
int ans;

int dfs(int i)
{
	int h1=0,h2=0;
    
	if(node[i].size()==0)
		return 0;
	
	for(int j=0;j<node[i].size();j++)
	{
		h2=max(h2, dfs(node[i][j])+1 );
		if(h2>h1)
			swap(h1,h2);
	}
	
	ans=max(ans,h1+h2);
	return h1;
}

int main(int argc, char** argv) {
	int n,t;
    
	while(cin >> n)
	{
		ans=0;
		for(int i=0;i<n;i++)
			node[i].clear();
        
		for(int i=0;i<n;i++)
			while(cin >> t && t!=-1)
				node[i].push_back(t);
        
		dfs(0);
		cout << ans << endl;
	}
	
	return 0;
}


b110
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

char map[256][256]={0};
int check(int n,int r,int c)
{
	for (int i=r;i<r+n;i++)
		for (int j=c;j<c+n;j++)
			if (map[i][j]!=map[r][c])
				return 0;
	return 1;
}

void dfs(int n,int r,int c) //r列，c欄，表示一張影像左上角的座標 
{
	if (n==1 || check(n,r,c) )
	{
		cout << (map[r][c]=='1' ? "b ":"w ");
		return;
	}
	cout << "g ";
	dfs(n/2,r,c+n/2);		  //東北 
	dfs(n/2,r,c);			    //西北 
	dfs(n/2,r+n/2,c);		  //西南 
	dfs(n/2,r+n/2,c+n/2);	//東南 
}

int main(int argc, char** argv) {
	int n;
	while(cin >> n)
	{
		for (int i=0;i<n;i++)
			cin >> map[i];
			
		dfs(n,0,0);
		cout << endl; 
     }
	
	return 0;
}


b112
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int gcd(int big,int small){
	
	int rem;
	
	while(small!=0)
	{
		rem=big%small;
		big=small;
		small=rem;
	}
		
	return big;
}

int main(int argc, char** argv) {
	
  int n,a,b;
  while (cin >> n)
  {
    cin >> a;
    for(int i=1;i<n;i++)
	  {
    	cin >> b;
		  a=gcd(a,b);
    }
    
	  cout << a <<endl;
  } 
	return 0;
}


b122
#include <iostream>
using namespace std;

int main()
{
    int m,n;
    while(cin >> m >> n)
    {
        int graph[m+1][n+1],time,minTime=1e9,zx,zy;

        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
                cin >> graph[i][j];

        for(int i=1;i<=m;i++)       //窮舉所有可能的用餐地點
        {
            for(int j=1;j<=n;j++)
            {
                time=0;
                for(int x=1;x<=m;x++)
                    for(int y=1;y<=n;y++)
                        time+=graph[x][y]*(abs(i-x)+abs(j-y));

                if(time<minTime)
                {
                    minTime=time;
                    zx=i;
                    zy=j;
                }
            }
        }

        cout << zx << " " << zy << endl;;
    }

    return 0;
}


b123
#include <iostream>
#include <climits>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int m,n;
	
	while(cin >> m >> n)
	{
		int map[200][200]={0},ans=0,area;
		
		for(int i=0;i<m;i++)		//列 
			for(int j=0;j<n;j++)	//欄 
				cin >> map[i][j];

		for(int i=0;i<m;i++)	//逐列計算每一欄累積的寬度
			for(int j=1;j<n;j++)
				if(map[i][j]==1)
					map[i][j]=map[i][j-1]+1;

		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
			{
				int min_width=INT_MAX;
				for (int h=0; i-h>= 0 && map[i-h][j]; h++)
				{
					min_width=min(min_width, map[i-h][j]); //以此點為矩形的右下角頂點，往上窮舉可構成的矩形，往上的過程中寬要取最小值(不能有障礙物)。 
					area=min_width*(h+1);
					ans=max(ans,area);
				}
			}
		}
		
		cout << ans << endl;
	}

	return 0;
} 


b127
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
	
	int n,f[46]={1,1,2};
	
	for(int i=3;i<46;i++)
		f[i]=f[i-1]+f[i-2];

	while(cin >> n)
    cout << f[n] << endl;
			
	return 0;
}


b184
#include <iostream>
#include <cstring>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int n,v,c,dp[101];
	
	while (cin >> n)
	{
		memset(dp, 0, sizeof(dp));
		while (n--)
		{
			cin >> v >> c;
			for (int i=100;i-v>=0;i--)
				dp[i]=max(dp[i-v]+c,dp[i]);
		}
		cout << dp[100] << endl;
	}

	return 0;
}

 
b186
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int a,b,c,m;
    
  while (cin >> a >> b >> c)
	{
		m=a/10;
		if (c/2<m)
			m=c/2;
		b+=m;
		
    cout << a <<" 個餅乾，" << b <<" 盒巧克力，" << c << " 個蛋糕。" << endl;
  }
	
	return 0;
}


b554
#include <iostream>
#include <cstdio>
using namespace std;
int n;
string s[6];

int dfs(int x,int y,int depth)
{
    if(s[x][y]=='1')
    {
        s[x][y]='0';
        depth++;

        int dx[4]={1,0,-1,0},dy[4]={0,1,0,-1},maxx=depth;
        for(int i=0;i<4;i++)
        {
            int nx=x+dx[i],ny=y+dy[i];
            if( nx>=0 && nx<n && ny>=0 && ny<n)
                maxx=max(maxx,dfs(nx,ny,depth));
        }

        s[x][y]='1';    //讓別條路徑可經過此點
        return maxx;
    }
    else
        return depth;
}

int main()
{
    while(scanf("%d\n",&n)!=EOF)
    {
        for(int i=0;i<n;i++)
            getline(cin,s[i]);

        cout << dfs(0,0,0) << endl;
    }
    
    return 0;

b565
#include <iostream>
using namespace std;

int main()
{
    int n;
    while(cin>>n)
    {
        int dp[n],maxSum=0;
        for(int i=0;i<n;i++)
            cin >> dp[i];

        for(int i=1;i<n;i++)
        {
            dp[i]=max(dp[i],dp[i-1]+dp[i]);
            maxSum=max(maxSum,dp[i]);
        }
        cout<<maxSum<<endl;
    }
    return 0;
}


b681
#include <iostream>
using namespace std;

int main()
{
    long long int L;

    while(cin >> L)
        cout << ( L>0 ? 2*L-1 : -L*2 ) << endl;

    return 0;
}


b838
#include <iostream>
#include <cstdio>
#include <stack>

using namespace std;

int main()
{
    int t;
    scanf("%d\n",&t);

    while(t--)
    {
        stack<char> sk;
        string s;
        int cnt=0;

        cin >> s;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='(')
                sk.push(s[i]);
            else
            {
                if(sk.size()>0)
                {
                    sk.pop();
                    cnt++;
                }
                else
                {
                    cnt=0;
                    break;
                }
            }
        }

        if(sk.size()>0)
           cnt=0;

        cout << cnt << endl;
    }

    return 0;
}


b523
#include <iostream>
#include <set>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	set<string> s;
	string line;
	while(getline(cin,line)) 
	{
		cout << (s.count(line) ? "YES" : "NO") << endl;
		s.insert(line);
	}
	
	return 0;
}


b581
#include<iostream>
#include<sstream>

using namespace std ;

int main(){
	int T; 
	string line;
	
	cin >> T;
	getline(cin,line);
	
	while(T--)
	{
		stringstream ss;
		int num,sum=0;
		
		getline(cin,line);
		ss << line;
		while(ss >> num)
		    sum+=num;

	      cout << sum <<endl ;
	}
}


b582
#include <iostream>
#include <algorithm>
using namespace std;
int x[1000000],y[1000000];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int T;
    cin >> T;
    while(T--)
    {
        int N;
        long long sum=0;

        cin >> N;
        for(int i=0;i<N;i++)
            cin >> x[i] >> y[i];

        int mid=N/2;
        nth_element(x,x+mid,x+N);
        nth_element(y,y+mid,y+N);

        for(int i=0;i<N;i++)
            sum+=abs(x[i]-x[mid])+abs(y[i]-y[mid]);
        cout << sum << endl;
    }

    return 0;
}


b844
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int main()
{
    int n,q,q_num;

    while(cin >> n >> q)
    {
        vector<int> button_num(n);
        for(int &a:button_num)
            cin >> a;

        sort(button_num.begin(),button_num.end());

        for(int i=0;i<q;i++)
        {
            cin >> q_num;

            vector<int>::iterator q_num_it=upper_bound(button_num.begin(),button_num.end(),q_num);
            int cnt=q_num_it-button_num.begin();

            cout << (cnt%2==0 ? 0:1) << endl;
        }
    }
    return 0;
}

/*NA (score:50%)

        for(int i=0;i<q;i++)
        {
            int cnt=0;
            cin >> q_num;
            for (int j=0;j<n;j++)
                if(button_num[j]<=q_num)
                    cnt++;
            cout << (cnt%2==0 ? 0:1) << endl;
        }
*/


c299
#include <iostream>
#include <algorithm>

using namespace std;
int main () {
	int n;
	
	while(cin >> n)
	{
		int t, maximum=0, minimum=1001;

		for (int i=0;i<n;i++)
		{
			cin >> t;
			maximum=max(maximum,t);
			minimum=min(minimum,t);
		}
		
		cout << minimum << " " << maximum << " " << ( (maximum-minimum+1 == n)? "yes":"no" ) << endl;
	}
	
	return 0;
}


c421
#include<cstdio>
#include<set>
using namespace std;

int main()
{

	int p;
	multiset<int> s;
	
	while(scanf("%d",&p)!=EOF && p!=0)
	{
		if(p==-1)
		{
			if(s.size()==0)
				continue;
			printf("%d ",*s.begin());
			s.erase(s.begin());
		}
		else if(p==-2)
		{
			if(s.size()==0)
				continue;
			multiset<int>::iterator it=s.end();
			it--;
			printf("%d ",*it);
			s.erase(it);
		}
		else s.insert(p);
	}
	
	return 0;
}


c423
#include <iostream>
#include <string>
#include <sstream>
#include <set>

using namespace std;


int rule1(string s)
{
	int sum=0;
	stringstream ss;

	for(int i=0;i<s.length();i++)
		sum+=s[i]-'0';

	if(sum<10)
		return sum;

	ss << sum;
	ss >> s;

	return rule1(s);
}


/* 會ＴＬＥ？
int rule1(string s)
{
	int sum;
	stringstream ss;

    do
    {
        sum=0;
        for(int i=0;i<s.length();i++)
            sum+=s[i]-'0';

        ss.clear();
        ss << sum;
        ss >> s;
    }while(sum>10);

    return sum;
}
*/

int main()
{
    int n,r;
    string str;

    while (cin >> n >> r >> str)
    {
        set<string> s;

        for (int i=0;i<10;i++)
        {
            string iStr;
            stringstream ss;

            ss << i;
            ss >> iStr;

            if (r==rule1(iStr+str))
                for (int j=0;j<n;j++)
                    s.insert(str.substr(0,j)+iStr+str.substr(j));
        }

        s.erase(s.begin());
        s.erase(--s.end());
        for(auto it:s)
            cout << it << endl;
    }

    return 0;
}


c424
#include<iostream>
#include<cmath>
using namespace std;

const int ROW=500000+5;
const int COLUMN=20+5;    //log(500000)/log(2.0)~18.93
int max_st[ROW][COLUMN];

void RMQ_INIT(int seq[], int len)
{
    for(int i=0;i<len;i++)
        max_st[i][0]=seq[i];

    int k=log(len)/log(2.0);
    for(int j=1; j<=k; j++) // 	for(int j=1; (1<<j)<=len; j++)
        for(int i=0; i+(1<<j)-1<=len; i++)
            max_st[i][j]=max(max_st[i][j-1], max_st[i + (1 << (j-1))][j-1]);
}


int main(int argc, char** argv) {
	int N ;

	while(cin >> N)
	{
            int seq[N],M,a,b;
            for (int i=0;i<N;i++)
            cin >> seq[i];
            RMQ_INIT(seq,N);

	    cin >> M;
	    for (int i=0;i<M;i++)
	    {
		cin >> a >> b;
                int l=min(a,b)-1,r=max(a,b)-1;
                int k=log2(r-l+1);  //(int)((log(r-l+1))/log(2.0));
		cout << max(max_st[l][k], max_st[r-(1<<k)+1][k]) << endl;
	    }
	}

	return 0;
}


c459
#include<iostream>
#include<cmath>
#include<cstring>
using namespace std;

int main()
{
	char N[9];
	int b;
	
	while(cin >> b >> N)
	{
		int len=strlen(N),sumLeft=0,sumRight=0;
		
		for(int i=0;i<len;i++)
		{
			sumLeft *= b;
			sumLeft += (N[i]-'0');

			sumRight += pow(N[i]-'0',len);
		}
		
		cout << (sumLeft==sumRight? "YES":"NO") << endl;
	}
	
	return 0;
}


c460
#include <iostream>
using namespace std;

int main()
{
    int n,ci,ai,ri,di;
    while(cin >> n)
    {
        int army[4][8]={0};
        long long int ans=0;

        for (int i=0;i<n;i++)
        {
            cin >> ci >> ai >> ri >> di;
            army[ci][4*ai+2*ri+di]++; //以2進位的觀點，ai表示4，ri表示2，di表示1，將3種特性表示成1個數字
        }

        for (int i=0;i<8;i++)
            for (int j=0;j<8;j++)
                for (int k=0;k<8;k++)
                    if ( (i|j|k) == 7 ) //i,j,k為3種族特性，i|j|k為7表示3特性均有
                        ans+=army[1][i]*army[2][j]*army[3][k];

        cout << ans << endl;
    }

    return 0;
}


c776
#include <iostream>
using namespace std;

int main()
{
    int n,m;
    while(cin >> n >> m)
    {
        cout << n*(6*m-2*(m-1))-m*(n-1) << endl;
                // 每一橫行的白色屋瓦(重覆的為2*(m-1)，有n橫行
                              //n橫行組合一起，重覆的為m*(n-1)
    }
    return 0;
}


b964
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,s[20];
  	
	while(cin >> n)
	{
		int up60=101;		//及格最低分
		int down60=-1;	//不及格最高分 
		
		for(int i=0;i<n;i++)
		{
			cin >> s[i];
			if(s[i]>=60)
				up60=min(up60,s[i]);
			else
				down60=max(down60,s[i]);
		}
     
		sort(s,s+n);
		for(int i=0; i<n-1; i++)
			cout << s[i] << " ";
		cout << s[n-1] << endl;

		if( down60==-1 )
			cout << "best case\n";
		else
			cout << down60 << endl;
     
	 	if( up60==101 )
			cout << "worst case\n";
		else
			cout << up60 << endl;
	}
	return 0;
}


b965
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int r,c,m,b[11][10][10],op[10];

	while(cin >> r >> c >> m ) 
	{
		for(int i=0;i<r;i++)
			for(int j=0;j<c;j++)
				cin >> b[m][i][j];

		for(int i=1;i<=m;i++)
			cin >> op[i];
		
		for(int k=m;k>0;k--)
		{
			if(op[k]==0) //逆旋轉。把第k個矩陣逆旋轉後，記錄在k-1個位置。 
			{
				for(int i=0;i<r;i++)
   					for(int j=0;j<c;j++)
     						b[k-1][c-1-j][i]=b[k][i][j];
     			
				swap(r,c);
			}
   			else		//逆翻轉 
   			{
				for(int i=0;i<r;i++)
   					for(int j=0;j<c;j++)
						b[k-1][r-1-i][j]=b[k][i][j];
			}
		}

		cout << r << " " << c << endl;
		for(int i=0;i<r;i++)
		{
			for(int j=0;j<c-1;j++)
				cout << b[0][i][j] << " ";
			cout << b[0][i][c-1] << endl;
		}
	}
	return 0;
}


b966
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

struct Seg {
	int L,R;
} seg[10000];

bool operator< (const Seg& a, const Seg& b)
{ 
	if (a.L!=b.R)
		return a.L < b.L;
	else 
		return a.R < b.R;
	
//	return (a.L<b.L || (a.L==b.L && a.R < b.R) );
}

int main(int argc, char** argv) {
	int n;
	
	while (cin >> n)
	{
		for (int i=0;i<n;i++) 
			cin >> seg[i].L >> seg[i].R;
		
		sort(seg,seg+n);	//依線段開始端點排序 
		
		int pL=seg[0].L,pR=seg[0].R,ans=0;	//前一條線段(previous)
		for (int i=1;i<n;i++)
		{
			int nL=seg[i].L,nR=seg[i].R;		//下一條線段(next) 
			if (nL>pR)					//下一條的左端點 > 前一條右端點，則前一條線段已結束，可以計算覆蓋長度
			{        
				ans += (pR-pL);
				pL=nL;        
				pR=nR;
			}
			else if (nL<=pR && nR>pR)		//下一條的左端點 <= 前一條右端點，表示前一條線段可延續
				pR=nR;  
		}
		ans+=(pR-pL);
		cout << ans << endl;
	}

	return 0;
}


b967
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

vector<int> node[100000];
int dad[100000];
int ans;

int dfs(int i)
{
	int h1=0,h2=0; 	//子樹最長高h1，次高h2 
    
	if(node[i].size()==0) 	//樹葉高為0 
		return 0;
	
	for(int j=0;j<node[i].size();j++)
	{
		h2=max(h2, dfs(node[i][j])+1 );	//遞迴找各子樹樹高 
		if(h2>h1)			//若目前子樹的樹高>h1，交換 
			swap(h1,h2);
	}
	
	ans=max(ans,h1+h2);
	return h1;
}

int main(int argc, char** argv) {
	int n,a,b,root;
    
	while(cin >> n)
	{
		ans=0;
		memset(dad,-1,sizeof(dad));
		for(int i=0;i<n;i++)
			node[i].clear();
        
		for(int i=0;i<n-1;i++)
		{
			cin >> a >> b;
			node[a].push_back(b);
			dad[b]=a;
		}
        
		for (root=0;root<n;root++)//找根 
			if (dad[root]==-1)
				break;
	 	
		dfs(root);
		cout << ans << endl;
	}
	
	return 0;
}


d231
#include <iostream>
#include <cstring>
using namespace std;
int dp[51][51],prv[51][51];//prv記錄來源位置
string s1,s2,lcs;

void Print(int i,int j)
{
    if(i==-1 || j==-1)
        return;

    if(prv[i][j]==0) //左上
    {
        lcs=s1[i]+lcs;
        Print(i-1,j-1);
    }
    else if(prv[i][j]==1) //上
        Print(i-1,j);
    else if(prv[i][j]==2) //右
        Print(i,j-1);
}

int main()
{
    while (cin >>s1 >>s2)
    {
        memset(dp,0,sizeof(dp));
        memset(prv,0,sizeof(prv));
        lcs="";

        for(int i=0;i<s1.size();i++)
        {
            for(int j=0;j<s2.size();j++)
            {
                if(s1[i]==s2[j]) //若s1的第i個字元與s2的第j個字元相同
                {
                    prv[i][j]=0; //左上
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else//若s1的第i個字元與s2的第j個字元不相同，則取dp[i-1][j]與dp[i][j-1]較大者
                {
                    if (dp[i-1][j] > dp[i][j-1])
                    {
                        prv[i][j]=1; //上
                        dp[i][j]=dp[i-1][j];
                    }
                    else
                    {
                        prv[i][j]=2; //左
                        dp[i][j]=dp[i][j-1];
                    }
                }
            }
        }

        Print(s1.size()-1,s2.size()-1);
        cout << (lcs!="" ? lcs : "E" ) << endl;
    }
}


d371
#include <iostream>
#include <queue>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int main(int argc, char** argv) {
	int n;
	priority_queue< int,vector<int>,greater<int> > pq;
	
	while(cin >> n)
	{
		int ans=0,f; 
		
		for (int i=0;i<n;i++)
		{
			cin >> f;
			pq.push(f);
		}	
	
		while (pq.size()>=2)
		{
			int a=pq.top(); 
			pq.pop();
			int b=pq.top();
			pq.pop();
		
			pq.push(a+b);
			ans += a+b;
		}

		cout << ans << endl;
	}
	
	return 0;
}


d430
#include <iostream>
#include <sstream>
using namespace std;
int main()
{
    char c;
    string line,tmp;

    while((c=getchar())!=EOF)
    {
        if(isalpha(c) || isdigit(c))
            line+=c;
        else if(c==' ' || c=='\n')
            line+=' ';
    }

    int ans=0;
    stringstream ss(line);
    while(ss >> tmp)
        ans++;

    cout << ans << endl;

    return 0;
}


d452
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
  int n;

  cin >> n;
  for(int i=0;i<n;i++)
	{
    int m,dist=0,pos[1000];
        
		cin >>m;
        
		for(int j=0;j<m;j++)
      cin >> pos[j];
        
		sort(pos,pos+m);
        
		for(int j=0;j<m;j++)
      dist+=abs(pos[m/2]-pos[j]);
        
		cout << dist << endl;
  }
	
  return 0;
}


#include <iostream>
#include <algorithm>
using namespace std;
int main(int argc, char** argv) {
    int n,Min;
    cin >> n;

    while(n--)
    {
        int m,dist=0,a[1000];
        cin >>m;

        for(int i=0;i<m;i++)
            cin >> a[i];

        for(int i=0;i<m-1;i++) //selection sort
        {
            Min=i;
            for(int j=i+1;j<m;j++)
            {
                if(a[j]<a[Min])
                    Min=j;
            }
            swap(a[i],a[Min]);
        }

        for(int i=0;i<m;i++)
            dist+=abs(a[m/2]-a[i]);

        cout << dist << endl;
    }

    return 0;
}


d501
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
    int n;
    vector<int> v;

    while(cin >> n)
    {
        v.resize(n);
		for(int &x:v)
            cin >> x;

        sort(v.begin(),v.end());

        if(n%2==1)
            cout << "A=" << v[n/2];
        else
        {
            cout << "A=";
            for(int i=v[n/2-1];i<=v[n/2];i++)
            {
                cout << i;
                if(i!=v[n/2])
                    cout << "、";
            }
        }
        cout << endl ;
    }
    return 0;
}


d502
#include <iostream>
using namespace std;

int main()
{
    int cnt,a,b,c,d,left;

    while(cin >> a >> b >> c >> d)
    {
        cnt=d;

        cnt+=c;
        (a>37*c) ? a-=(37*c) : a=0; //一個3x3剩的空間有37個，可放1x1

        cnt+=b/8;
        b%=8;
        if(b>0)
           cnt++;
        (a>64-b*8) ? a-=(64-8*b) : a=0; //2x2最後一個剩下的空間有64-8*b個，可放1x1

        cnt+=a/64;
        a%=64;
        if(a>0)
           cnt++;

        cout << cnt << endl;
    }

    return 0;
}


d536
#include <iostream>
#include <cstring>
#include <climits>

using namespace std;
int used[26],graph[26][26],ans;

void dfs(int now,int start,int len)
{
    if (len>ans)
        return;

    for (int i=0;i<26;i++)
    {
        if(graph[now][i]==1) //現在這個點和i有連通
        {
            if (used[i]==0) //i未去過
            {
                used[i]=1;
                dfs(i,start,len+1); //從i繼續往下走
                used[i]=0;
            }
            else if (i==start) //i為起始點
                ans=len;
        }
    }

}

int main()
{
    int m;
    char n1,n2;
    while(cin>>m)
    {
        memset(used,0,26);
        memset(graph,0,26*26);
        ans=INT_MAX;

        for (int i=0;i<m;i++)
        {
            cin >> n1 >> n2;
            graph[(int)n1-65][(int)n2-65]=1;
        }

        for (int i=0;i<26;i++)//依序把A~Z設為起點，檢查是否有環
        {
            used[i]=1;//表示此點走過
            dfs(i,i,1);
            used[i]=0;//檢查完此點要重設無0，讓以後的檢查可以使用
        }
        cout << (ans==INT_MAX?0:ans) <<endl;

    }
    return 0;
}


d596
#include<iostream>
using namespace std;
int main()
{
    int n,a,b,c,neighbor[10][4]={{0,0,0,0},
                                {2,4,0,0},
                                {1,3,5,0},
                                {2,6,0,0},
                                {1,5,7,0},
                                {2,4,6,8},
                                {3,5,9,0},
                                {4,8,0,0},
                                {5,7,9,0},
                                {6,8,0,0}}; //隔壁格子編號
    cin >> n;
    while(n--)
    {
        bool bomb[10]={0},Empty=true;
        cin >> a >> b >> c;

        for(int i=0;i<4;i++)
            bomb[ neighbor[a][i] ]=true;

        for(int i=0;i<4;i++)
        {
            bomb[ neighbor[b][i] ]=false;
            bomb[ neighbor[c][i] ]=false;
        }

        for(int i=1;i<=9;i++)
            if(bomb[i])
            {
                cout << i << " ";
                Empty=false;
            }
        cout << (Empty ? "Empty":"") << endl;
    }
    return 0;
}


d504
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	unsigned long long int f[41]={1,1,5};
	for (int i=3;i<=40;i++)
		f[i]=f[i-1]+4*f[i-2]+2*f[i-3];
	
	int t,n;
	cin >> t;
	while(t--)
	{
		cin >> n; 
		cout << f[n] << endl;
	}
	
	return 0;
}


d887
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	long long int f[26]={0},n;
  	f[0]=1;
  	
	for(int i=1;i<=25;i++)
		for(int j=0;j<i;j++)
			f[i]+=f[i-j-1]*f[j];
 
	while(cin>>n)
		cout << f[n] << endl;
 
	return 0;
}

    
d890
#include <iostream>
using namespace std;
int main()
{
    int n,k,half,sum=0,gift[501],dp[50000];
    while (cin >> n >> k)
    {
        for(int i=0;i<n;i++)
        {
            cin >> gift[i];
            sum+=gift[i];
        }
        half=sum/2;

        for(int i=0;i<50000;i++)
            dp[i]=0;

        for(int i=0;i<n;i++)           //0-1 knapsack 每樣物品只有一個，cost與weight視為相同
            for(int j=half;j-gift[i]>=0;j--)  //使用一維陣列，重量由右邊計算來
                if( dp[j] < (dp[ j-gift[i] ]+gift[i]) )
                    dp[j]= dp[ j-gift[i] ]+gift[i];


        cout << dp[half] << " " << sum-dp[half] << endl;
    }

    return 0;
}


d908
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
  int graph[26][26],n;
  char start;
    
	memset(graph,0,sizeof(graph));

  cin >> start >> n;
    
  char a,b;
  int w;

  for (int i=0;i<n;i++)
	{
    cin >> a >> b >> w;
    if ( w > graph[a-'A'][b-'A'] )	//有些線段會重複 
     	graph[a-'A'][b-'A']=w;
  }
    
  for (int k=0;k<26;k++)
      for (int i=0;i<26;i++)
          for (int j=0;j<26;j++)
              if ( (graph[i][j]==0 || graph[i][j] < graph[i][k]+graph[k][j] ) && graph[i][k]!=0 && graph[k][j]!=0 )
                 graph[i][j]=graph[i][k]+graph[k][j];
	
    int ans=0,s=start-'A';
    for (int i=0;i<26;i++)
  		if (graph[s][i]>ans)
	   		ans=graph[s][i];
    
    cout << ans << endl;

}


d913
#include <iostream>
#include<algorithm>
using namespace std;

int main()
{
    int correct[6]={1,2,3,4,5,6},marble[6][7];

    for(int i=0;i<6;i++)
        for(int j=0;j<7;j++)
            cin >> marble[i][j];

    do{
        bool find=true;
        for(int i=0;i<6;i++)
        {
            int cnt =0;
            for(int j=0;j<6;j++)
                if(correct[j]==marble[i][j])
                    cnt++;

            if(cnt!=marble[i][6])
            {
                find=false;
                break;
            }
        }

        if(find)
        {
            for(int i=0;i<6;i++)
                cout << correct[i] << " ";
            cout << endl;
        }

    }while(next_permutation(correct,correct+6));

    return 0;
}


d914
#include <iostream>
using namespace std;
int main()
{
    int f,s;
    while(cin >> f)
    {
        int board1[20][20]={0},board2[20][20]={0},x,y,c,ans=0;

        for(int i=0;i<f;i++)
        {
            cin >> x >> y >> c;
            board1[x][y]=c+1; //0沒有棋子 1白 2黑
        }

        cin >> s;
        for(int i=0;i<s;i++)
        {
            cin >> x >> y >> c;
            board2[x][y]=c+1;
        }

        for(int i=0;i<20;i++)
            for(int j=0;j<20;j++)
            {
                if( (board1[i][j]==1 && board2[i][j]==2) || (board1[i][j]==2 && board2[i][j]==1) )
                    ans+=2;
                if( (board1[i][j]==1 && board2[i][j]==0) ||
                    (board1[i][j]==2 && board2[i][j]==0) ||
                    (board1[i][j]==0 && board2[i][j]==1) ||
                    (board1[i][j]==0 && board2[i][j]== 2) )
                     ans+=1;
            }

        cout << ans << endl;;
    }

    return 0;
}


-------------------------IOI/APCS

b130
#include <iostream>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int n,num[100],out[100],c=1;

	cin >> n;
	for (int i=0;i<n;i++)
		cin >> num[i];
	
	sort(num,num+n);
	
	out[0]=num[0];
	for (int i=1;i<n;i++)
	{
		if (num[i]!=num[i-1])
		{
			out[c]=num[i];
			c++;
		}
	}

	cout << c << endl;
	for (int i=0;i<c;i++)
		cout << out[i] << " ";
	return 0;
}

#include <iostream>
#include<algorithm>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

int main(int argc, char** argv) {
   
	
	int n,flag[1001],in,num[100],c=0;
	
	memset(flag,0,sizeof(flag));
	cin >> n;
	
	for(int i=0;i<n;i++)
	{
		cin>>in;
		if(flag[in]==0)
		{
			flag[in]=1;
			num[c]=in;
			c++;
		}
	}
	
	sort(num,num+c);
	
	cout<<c<<endl;
	for(int i=0;i<c;i++)
		cout<<num[i]<<" ";	

	return 0;
}


b131
#include<iostream>
using namespace std ;
int main()
{
	int n,m,v[26],p[26];//v價錢，p重要度
	long long int dp[30001]={0};

	while(cin >> n >> m)
    {
		for (int i=0;i<m;i++)
            cin >> v[i] >> p[i];

		for(int i=0;i<m;i++) //對每個物品考慮要不要買
			for (int j=n;j>=v[i];j--) //由n元往前，考慮每個金額買不買i物的狀況
				dp[j]=max(dp[j],dp[j-v[i]]+v[i]*p[i]);

		cout << dp[n] << endl;
	}

	return 0;
}


b138
#include <iostream>
using namespace std;

int main(int argc, char** argv) {
	int h[10];
	while(cin >> h[0] >> h[1] >> h[2] >> h[3] >> h[4] >> h[5] >> h[6] >> h[7] >> h[8] >> h[9])
	{
		int sum=0,tall;
		cin >> tall;

		for(int i=0;i<10;i++)
			if(tall+30>=h[i])
				sum++;

		cout << sum << endl;
	}

	return 0;
}


b139
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int L,M,num[10001],begin,end;
	
	while (cin >> L >> M)
	{
		int count=0;
		memset(num,0,sizeof(num));
    	
		for (int i=0;i<M;i++)
		{
			cin >> begin >> end;
			for (int j=begin;j<=end;j++) 
			num[j]=1;
		}

		for(int i=0;i<=L;i++)
			if (num[i]== 0) 
				count++;
  
		cout << count << endl; 
	}
	
	return 0;
}


b151
#include <iostream>
#include <queue>
#include <stack>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	priority_queue < int, vector<int>, greater<int> > que;
	int sum,n,a;
	while(cin >> n)
	{
		int s1,s2;
		sum=0;	
		for (int i=0;i<n;i++)
		{
    		cin >> a;
			que.push(a);
        }
          
        while(que.size()>1)
		{
			s1=que.top();
			que.pop();
            s2=que.top();
			que.pop();
            sum+=s1+s2;
			que.push(s1+s2);
        }
		cout << sum;
	}
	
  return 0;
}


b162
#include <iostream>
#include <map>
using namespace std;
int main()
{
    int n;
    while(cin>>n)
    {
        int num;
        map<int,int> mp;

        for(int i=0;i<n;i++)
        {
            cin>>num;
            mp[num]++;
        }

        for(auto elm:mp)
            cout <<elm.first << " " << elm.second << endl;
    }

    return 0;
}


b231
#include <iostream>
#include<queue>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

struct Book
{
  int printT;
  int bindT;
}book[1000];

bool compare(Book a, Book b)
{
  return a.bindT>b.bindT;
}

int main(int argc, char** argv) {
  int n;
    
	while(cin >> n)
	{
	
    	for(int i=0;i<n;i++)
        	cin >> book[i].printT >> book[i].bindT;
    
    	sort(book, book+n, compare);//以裝訂時間從大排到小 
    
    	int finishPrintT = 0, finishBindT = 0, finalT = 0;
    
    	for(int i=0; i<n; i++)
    	{
        	finishPrintT += book[i].printT; 	//這本書將在finishPrintT完成列印  
        	finishBindT = finishPrintT + book[i].bindT;//這本書將在finishBindT完成裝訂 
        	finalT = max(finishBindT, finalT);//更新最後完成所有工作的時間 
    	}
    	cout << finalT <<endl;
	}
    
  return 0;
}
//印刷機只有一台，所以總列印時間不會變。隨時可以裝訂無限本，所以要先印裝訂久的書。


b232
#include <iostream>

using namespace std;

int main()
{
    long long int coin[400]={0},price[751]={1,0},coinNum=0,T,m;

    for(int i=1;i<750;i+=2,coinNum++)
        coin[coinNum]=i;

    for(int i=0;i<coinNum;i++)                      
        for(int j=coin[i];j<=750;j++)
            price[j]=price[j]+price[j-coin[i]];

    while(cin >> T)
    {
        for (int i=0;i<T;i++)
        {
            cin >> m;
            cout << price[m] << endl;
        }
    }

    return 0;
}



c290
#include <iostream>
#include <cstdlib>
using namespace std;
int main()
{
    string s;
        
	while(cin >> s)
	{
        int A=0,B=0;
        for(int i=0;i<s.length();i++)
		{
            if (i%2==1)
                A+=(s[i]-'0');
            else
                B+=(s[i]-'0');
        }
        cout << abs(A-B) << endl;
    }
}


c291
#include <iostream>
#include <cstring>
using namespace std;

int fri[50000],vis[50000];

void dfs(int i)
{
    vis[i]=1;
    if(!vis[fri[i]])
		dfs(fri[i]);
}
int main()
{
	int n;
	while(cin>>n)
	{
		int ans=0;
		memset(vis,0,sizeof(vis));
		for(int i=0;i<n;i++)
	            cin >> fri[i];

		for(int i=0;i<n;i++)
			if(!vis[i])
			{
				ans++;
				dfs(i);
			}

		cout << ans << endl;
	}
}


c292
#include<iostream>
using namespace std;
int main()
{
	int n,d;

	while(cin  >> n >>  d)
	{
		int a[n][n],nextR[4]={0,-1,0,1},nextC[4]={-1,0,1,0},r=n/2,c=n/2,dir=d,step=0,span=1,turn=0;

		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				cin>>a[i][j];

		for (int i=0;i<n*n;i++)
		{
			cout << a[r][c];
			r += nextR[dir];    //下一個座標
			c += nextC[dir];
			step++;             //記錄這一邊走了幾步

			if(step==span)      //如果這一邊走的步數==每邊應走距離
                        {
				dir=(dir+1)%4;  //轉方向
				turn++;         //記錄轉了幾次
				step=0;

				if(turn==2)     //轉了2次每邊應走距離就+1
				{
                                       span++;
                                       turn=0;
                               }
			}
		}
		cout << endl;

	}
}


c294
#include <iostream>
using namespace std;
void swap(int& a,int& b)
{
    int t;
    t=a;
    a=b;
    b=t;
}

int main(int argc, char** argv) {
 	int a,b,c;
	while(cin >> a >> b >> c)
	{
		if(a>c) swap(a,c);
		if(b>c) swap(b,c);
		if(a>b) swap(a,b);

		if(a+b<=c)
			cout << a << " " << b << " " << c << endl << "No" << endl;
		else if(a*a+b*b<c*c)
			cout << a << " " << b << " " << c << endl << "Obtuse" << endl;
		else if(a*a+b*b==c*c)
			cout << a << " " << b << " " << c << endl << "Right" << endl;
		else
			cout << a << " " << b << " " << c << endl << "Acute" << endl;
	}
}


#include <iostream>
using namespace std;
int main(int argc, char** argv) {
 	int a,b,c;
	while(cin >> a >> b >> c)
	{
		if(a>c) swap(a,c);
		if(b>c) swap(b,c);
		if(a>b) swap(a,b);
		
		if(a+b<=c)
			cout << a << " " << b << " " << c << endl << "No" << endl;
		else if(a*a+b*b<c*c) 
			cout << a << " " << b << " " << c << endl << "Obtuse" << endl;
		else if(a*a+b*b==c*c) 
			cout << a << " " << b << " " << c << endl << "Right" << endl;
		else 
			cout << a << " " << b << " " << c << endl << "Acute" << endl;
	}
}


c295
#include <iostream>

using namespace std;

int main(){
    int max[20]={0},n,m;

    while (cin >> n >> m)
    {
        int x,sum=0;
        bool first=true;

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                cin >> x;
                if (x>max[i])
                    max[i]=x;
            }
        }

        for(int i=0;i<n;i++)
            sum+=max[i];

        cout << sum << endl;

        for(int i=0;i<n;i++)
        {
            if (sum%max[i]==0)
            {
                if (first)
                    first=false;
                else
                    cout << " ";
                cout << max[i];
            }
        }

        if (first) cout << -1;
        cout << endl;
    }
}


c461
#include <iostream>

using namespace std;

int main()
{
    int a,b,c;
    while (cin >> a >> b >> c)
    {
        a=(a>=1 ? 1:0);
        b=(b>=1 ? 1:0);

        int cnt=0;

        if ((a&b)==c)
        {
            cout << "AND" << endl;
            cnt++;
        }

        if ((a|b)==c)
        {
            cout << "OR" << endl;
            cnt++;
        }

        if ((a^b)==c)
        {
            cout << "XOR" << endl;
            cnt++;
        }

        if (cnt==0)
            cout << "IMPOSSIBLE" << endl;
    }

    return 0;
}


c462
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
    int k;
    string s;
    while (cin >> k >> s)
    {
        int len[s.length()],ans=0,sec=0/*第幾個區段*/,num=1/*每區段字母長度*/,type=(islower(s[0])?0:1);/*0表示目前輸入小寫，1大寫*/

        for (int i=1;i<s.length();i++) //找出每一個連續大(小)寫片段的長度並將其記錄在陣列
        {
            if (type==0 && islower(s[i]) || type==1 && isupper(s[i]))
                num++;
            else if (type==0 && isupper(s[i]))
            {
                len[sec++]=num;
                num=1;
                type=1;
            }
            else if (type==1 && islower(s[i]))
            {
                len[sec++]=num;
                num=1;
                type=0;
            }
        }
        len[sec++]=num;//存最後一區段的長度

        for (int i=0; i<sec ;i++)
            if (len[i]==k)
            {
                int l=i-1,r=i+1,sum=len[i];
                while(l>=0 && len[l]==k)            //往左延伸
                    sum+=len[l--];
                if (l>=0 && len[l]>k)               //最左端點可以>k
                    sum+=k;
                while(r<sec && len[r]==k)           //往右延伸
                    sum+=len[r++];
                if (r<sec && len[r]>k)
                    sum+=k;
                ans=max(sum,ans);
            }

        cout << ans << endl;
    }

    return 0;
}


c463
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

vector<int> tree[100001];
int dad[100001];
int h[100001];

int findH(int i)
{
    int height=0;

    if (tree[i].size()==0)
        h[i]=0;

    for (int j=0;j<tree[i].size();j++)
        height=max(height,findH(tree[i][j])+1);
    h[i]=height;

    return h[i];
}

int main()
{
    int n;
    while (cin >> n)
    {
        memset(dad,-1,sizeof(dad));
        long long int root,sum=0;

        for (int i=1;i<=n;i++)
        {
            int sonNum;
            cin >> sonNum;
            for (int j=1;j<=sonNum;j++)
            {
                int t;
                cin >> t;
                tree[i].push_back(t);
                dad[t]=i;
            }
        }

		for (root=1;root<=n;root++)//找根
			if (dad[root]==-1)
				break;

		findH(root);

		for (int i=1;i<=n;i++)
            sum+=h[i];
		cout << root << endl << sum <<endl;
    }

    return 0;
}


c471
#include <iostream>
#include <algorithm>
using namespace std;

struct box
{
	int w,f;
}b[100000];

bool cmp(box i,box j)
{
    if (i.w*j.f < j.w*i.f)
	return true;
    else
        return false;
}

int main()
{
    int n;
    while(cin>>n)
    {
        long long int ans=0,wSum;
        for (int i=0;i<n;i++)
            cin >> b[i].w;
        for (int i=0;i<n;i++)
            cin >> b[i].f;

        sort(b,b+n,cmp);

        wSum=b[0].w;
	for (int i=1;i<n;i++)
        {
            ans+=b[i].f*wSum;
            wSum+=b[i].w;
        }

	cout << ans << endl;
    }

    return 0;
}



c575
#include<iostream>
#include<algorithm>

using namespace std;
int main(){
	int n,k;

	while(cin>>n>>k)
	{
		int p[50000],d[50000],low=0,high=1000000000;

		for(int i=0;i<n;i++)
			cin>>p[i];

		sort(p,p+n);

		for(int i=1;i<n;i++)
			d[i]=p[i]-p[i-1];

		while(low <= high)
		{
			int mid=(low+high)/2,sum=0,usedK=0; //mid為假設的基地台直徑

			for(int i=1;i<n;i++)	//以假設的基地台直徑，檢查需要設多少基地台 
			{
				if(sum+d[i] < mid)
					sum+=d[i];
				else                //如果目前基地台的距離合，超出假設的基地台直徑，則基地台加1
				{
					usedK++;
					sum=0;
				}
			}

			if(usedK < k)           //全部檢查完，如果使用的基地台數少於k，則減少假設的基地台直徑
				high=mid-1;
			else
				low=mid+1;
		}

		cout << (high!=0?high:high+1) << endl;
	}
}


d103
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    char isbn[14];
   
    while(cin >> isbn)
    {
        int sum=1*(isbn[0]-'0')+2*(isbn[2]-'0')+3*(isbn[3]-'0')+4*(isbn[4]-'0')+5*(isbn[6]-'0')+6*(isbn[7]-'0')+7*(isbn[8]-'0')+8*(isbn[9]-'0')+9*(isbn[10]-'0');
       
        if( sum%11==isbn[12]-'0' || (sum%11==10 && isbn[12]=='X') )
            cout << "Right" << endl;
        else
        {
            for(int i=0;i<12;i++)
                cout << isbn[i];

            if(sum%11!=10)
		cout << sum%11 << endl;
            else
		cout << "X" << endl;
        }
    }
    return 0;
}

d126
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	short a,b;
	
	while(cin >> a >> b)
	{
		cout << (a+b)*2 << endl;
	}	
		
	return 0;
}


d127
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  long long	int l,m,n;
    
  while (cin >>l)
	{
		m=l/4;
		n=l/2-m;
    cout <<m*n <<endl;
  }
	
	return 0;
}


d153
#include <iostream>
#include <vector>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int t,n;
	cin >> t;
	
	for (int i=0;i<t;i++)
	{
		while (cin >> n)
		{
			vector<int> v(n);
			for (int i=0;i<n;i++)
				cin >> v[i];
			
			sort(v.begin(),v.end());
		
			cout << (n%2==0 ? v[n/2-1]:v[n/2]) << endl;
		}
	}
	return 0;
}

#include <iostream>
#include <vector>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int t,n;
	cin >> t;
	
	for (int i=0;i<t;i++)
	{
		while (cin >> n)
		{
			vector<int> v;
			int iq;
			for (int i=0;i<n;i++)
			{
				cin >> iq;
			    v.push_back(iq);
			}
			
			sort(v.begin(),v.end());
		
			cout << (n%2==0 ? v[n/2-1]:v[n/2]) << endl;
		}
	}
  
	return 0;
}

//練習insertion sort
#include <iostream>
#include <algorithm>
using namespace std;
int main(int argc, char** argv) {
    int T;
    cin >> T;

    while(T--)
    {
        int n,a[40000];
        cin >>n;

        for(int i=0;i<n;i++)
            cin >> a[i];

        //insertion sort，會TLE
        for(int i=1;i<n;i++)
        {
            int t=a[i];          //未排序數列中第一個
            int j=i-1;
            while(j>=0 && a[j]>t)
            {
                a[j+1]=a[j];    //向右移
                j--;
            }
            a[j+1]=t;           //數值插入正確位置
        }

        cout << (n%2==0 ? a[n/2-1]:a[n/2]) << endl;
    }

    return 0;
}


d165
#include <iostream>
#include <cstring>
using namespace std;
int mp[105][105] ;

int dfs(int x,int y)
{
    if(mp[x][y]==0)
        return 0;

    int sum=mp[x][y];
    mp[x][y]=0 ;

    return sum+dfs(x-1,y)+dfs(x+1,y)+dfs(x,y-1)+dfs(x,y+1);
}

int main()
{
    int N,M;
    while(cin >> N >> M)
    {
        int cnt=0,maxx=0;
        memset(mp,0,sizeof(mp));

        for(int i=0;i<N;i++)
            for(int j=0;j<M;j++)
                cin >> mp[i+1][j+1];

        for(int i=1;i<=N;i++)
            for(int j=1;j<=M;j++)
            {
                int grass=dfs(i,j);
                if(grass>0)
                {
                    cnt++;
                    maxx=max(grass,maxx);
                }
            }

        cout << cnt << endl << maxx << endl;
    }

    return 0;
}


d356
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int k;
	
	while(cin>>k)
	{
		double sum=0;
    int i=1;
		
		do
		{
			sum+=1/(float)i;
			i++;
		}while(sum<k);
		
		cout << i-1;
	}

	return 0;
}


d900
#include <iostream>
#include <queue>
#include <stack>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	priority_queue< int ,vector<int> ,greater<int> > que;
  int n,m;
   
	cin >> n >> m;
  for(int i=0;i<m;i++)
		que.push(0);

  int ans=0,wi;
	for(int i=0;i<n;i++)
	{
    cin >> wi;
    wi+=que.top();
    que.pop();
    que.push(wi);
    ans=max(ans,wi);
	}
	cout << ans;

	return 0;
}


d904
#include <iostream>
#include <cstring>
using namespace std;

int main(int argc, char** argv) {

  int target, n;
  while(cin >> target >> n) {
    int dp[1001],coin[10];

    memset(dp,0x7f,sizeof(dp));	//每一個價位的最少錢幣數量都先設為無窮大(十六進位7f7f7f7f為2139062143近似於2147483647) 
    dp[0]=0;
        
		for(int i=0;i<n;i++)    
			cin >> coin[i];
        
		for(int i=1;i<=target;i++)
      for(int j=0;j<n;j++)
      	if (i-coin[j]>=0)
     			dp[i]=min(dp[i],dp[i-coin[j]]+1);

    cout << dp[target] << endl;
  }	    
  return 0;
}

/*
c(n, target) = min( c(n-1, target) , c(n, target-coin[n]) + 1 )
               ^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^
               保持一樣        用去一個錢幣
c(n, target)：用第0種到第n種錢幣湊得價位target，最少所需要的錢幣數量
               
  int target, n;
  while(cin >> target >> n) {
    int dp[1001],coin[10];

    memset(dp,0x7f,sizeof(dp));
    dp[0]=0;
        
		for(int i=0;i<n;i++)    
			cin >> coin[i];
        
		for(int i=0;i<n;i++)
      for(int j=coin[i];j<=target;j++)
      	dp[j]=min(dp[j],dp[j-coin[i]]+1);

    cout << dp[target] << endl;
  }	    
*/

-------------------------UVa 題庫

a011
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	char line[1000];

	while(cin.getline(line,1000))
	{
		int ans=0;
	
		for (int i=0;i<strlen(line);i++)
		{
			if(isalpha(line[i]) && !isalpha(line[i-1]))      //會有line[-1]的運氣問題
			{
				ans++;
			}
		}
		cout << ans << endl;			
	}
  
	return 0;
}

#include <iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
  char s[1000];
    
	while(cin.getline(s,1000))
	{
		int ans=0;
		bool word=false;
  
    for(int i=0;i<strlen(s);i++)
    {
      if(isalpha(s[i])) //不可寫成 if( isalpha(s[i]) && !word ) 因為對"ab"的b而言，不需把word設為false，什麼都不用做
			{
				if (!word)
				{
					ans++;
 					word=true;
				}
      }
      else 
      {
				word=false;
		  }
		}

    cout << ans << endl;
  }

	return 0;
}


a012
#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	long long int m,n,ans;
	
	while(cin >> m >> n)
	{
		
		ans=m-n;
		
		if(ans<0)
		{
			ans=-ans;	
		}
		
		cout << ans;
		
	}	
	return 0;
}


#include <iostream>
#include <iomanip>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	long long int m,n;
	
	while(cin >> m >> n)
	{
		
		if(m>n)
		{
			cout << m-n << endl;	
		}
		else
		{
			cout << n-m << endl;	
		}
		
	}	
	
	return 0;
}


a111
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int f[101]={0},n;
	for(int i=1;i<=100;i++)
		f[i]=f[i-1]+i*i;

	while((cin>>n)&&n)
		cout << f[n] <<endl;                   
 
	return 0;
}


a130
#include <iostream>
#include <string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int t,v[10];
  string web[10];

  cin >> t;
    
  for (int i=0;i<t;i++)
	{
     int max=-1;
     for(int j=0;j<10;j++){
        cin >> web[j] >> v[j];
        if(v[j]>max)
           max=v[j];
     }
     cout << "Case #" << i+1 << ":\n";
     for(int j=0;j<10;j++){
        if(v[j]==max)
          cout << web[j] << endl;
     }
  }
	return 0;
}


#include <iostream>
#include <string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int t;
    
	struct record
  {
    	string name;
    	int v;
	};
	
  struct record web[10];
	
  cin >> t;
  for (int i=0;i<t;i++)
	{
      int max=-1;
      for(int j=0;j<10;j++){
          cin >> web[j].name >> web[j].v;
          if(web[j].v>max)
              max=web[j].v;
      }
      
      cout << "Case #" << i+1 << ":\n";
      for(int j=0;j<10;j++){
          if(web[j].v==max)
              cout << web[j].name << endl;
      }
  }
	return 0;
}


a132
#include <iostream>
#include <stack>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int n;

  while(cin >> n && n!=0)
	{
    int p=0;
    stack<int> sk;
        
		while(n){

     	sk.push(n&1);
      
      if (n&1)	//奇數&1為1，偶數&1為0，即除2的餘數。或p+=n&1; 
				p++;

     	n>>=1;		//n除以2
        
    }

		cout << "The parity of ";    
    while (!sk.empty())
		{
        	cout << sk.top();
        	sk.pop();
    }
    cout << " is " << p << " (mod 2)." << endl;

  }

	return 0;
}


a133
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int main(int argc, char** argv) {
	int lcs[101][101];	//lcs[i][j]代表取s1長度為i、s2長度為j的最長共同字串。
	int s1[101],s2[101],s1n,s2n,n=1;
  
  while(cin >> s1n >> s2n)
	{
	  if (s1n==0 && s2n==0) break;
    
		for(int i=0;i<s1n;i++) 
			cin >> s1[i];
   	for(int i=0;i<s2n;i++)
			cin >> s2[i];
    	
		memset(lcs,0,sizeof(lcs));            
    
		for(int i=1;i<=s1n;i++)
	    for(int j=1;j<=s2n;j++)
  	    if (s1[i-1]==s2[j-1])
				  lcs[i][j]=lcs[i-1][j-1]+1;
        else
			  	lcs[i][j]=max(lcs[i-1][j],lcs[i][j-1]);

	    cout << "Twin Towers #" << n++ << endl;
    	cout <<"Number of Tiles : "<< lcs[s1n][s2n] << endl <<endl;     
  }
	    
  return 0;
}


a135
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int t=1;
  string s;

  while(cin >> s && s != "#"){
    if(s == "HELLO") 
		  cout << "Case " << t << ": ENGLISH\n";
    else if(s == "HOLA") 
			cout << "Case " << t << ": SPANISH\n";
    else if(s == "HALLO")
			cout << "Case " << t << ": GERMAN\n";
    else if(s == "BONJOUR")
			cout << "Case " << t << ": FRENCH\n";
    else if(s == "CIAO")
			cout << "Case " << t << ": ITALIAN\n";
    else if(s == "ZDRAVSTVUJTE")
			cout << "Case " << t << ": RUSSIAN\n";
    else 
			cout << "Case " << t << ": UNKNOWN\n";

    t++;
  }

	return 0;
}


a465
#include<iostream>
#include<cstdio>
using namespace std;
int main()
{
    int T,N,Case=0;
    cin >> T;
    while(T--)
    {
        string line;
        int ans=0;
        cin >> N;
        cin.ignore();
        cin >> line;

        //遇到可耕種土地時，即在右邊之土地放一個稻草人。已被涵蓋的可耕種土地視為不可耕種之土地。
        for(int i=0;i<line.size();i++ )
            if(line[i]=='.')
            {
                line[i]=line[i+1]=line[i+2]='#';
                ans++;
            }

        cout << "Case " << ++Case << ": " << ans << endl;
    }
}


a158
#include <iostream>
#include <sstream>
#include <algorithm>
using namespace std;

int main()
{
    int T;
    cin>>T;
    cin.ignore();

    while(T--)
    {
        int num[100],m=0,tmp,ans=1;
        string s;
        getline(cin,s);
        stringstream ss(s);

        while(ss>>tmp)
            num[m++]=tmp;

        for(int i=0;i<m-1;i++)
            for(int j=i+1;j<m;j++)
                ans=max(ans,__gcd(num[i],num[j]));

        cout << ans << endl;
    }

    return 0;
}


a536
#include<iostream>
using namespace std;
int main(){
    int T,e,f,c;
    cin >> T;
    while(T--)
    {
        cin >> e >> f >> c;
        int empty=e+f,ans=0;

        while(empty>=c)
        {
            ans+=empty/c;
            empty=empty%c+empty/c; //換的剩下+換的喝完的空瓶
        }

        cout << ans << endl;
    }

    return 0;
}


a470
#include <iostream>
#include <cmath>
using namespace std;
long long int Max,Min,p,q;

void dfs(int level,long long int num)
{
    if(level==p)
    {
        if(num%q==0)
        {
            Max=max(Max,num);
            Min=min(Min,num);
        }
    }
    else
    {
        dfs(level+1,num*10+1);
        dfs(level+1,num*10+2);
    }
}

int main()
{
    int T,Case=0;
    cin >> T;
    while(T--)
    {
        cin >> p >> q;
        Max=0;
        Min=1e17;   //10^17
        q=pow(2,q);
        dfs(0,0);   //0位數，數字0開始dfs

        cout << "Case " << ++Case << ": ";
        if(Max==0)
            cout << "impossible" << endl;
        else
            if(Min==Max)
                cout << Max << endl;
            else
                cout << Min << " " << Max << endl;
    }
    return 0;
}


a522
#include <iostream>
using namespace std;

int main()
{
    int t,n,p;
    cin >> t;
    while(t--)
    {
        int dp[1001]={0},w[20];
        cin >> n >> p;

        for(int i=0;i<p;i++)
            cin >> w[i];

        dp[0]=1;
        for(int i=0;i<p;i++)
            for(int j=n;j>=w[i];j--) //j從目標長往回檢查，更新取第i個金屬棒能焊接成的長度
                if(dp[j-w[i]]==1)    //如果長度j-w[i]可以焊接成，長度j即可焊接成
                    dp[j]=1;

        cout << (dp[n]==1? "YES":"NO") << endl;
    }

    return 0;
}


a539
#include<iostream>
using namespace std;
int main()
{
    int n;
    while(cin >> n)
    {
        int a[n],cnt=0;
        for(int i=0;i<n;i++)
            cin >> a[i];

        for(int i=0;i<n;i++)
            for(int j=i+1;j<n;j++)
                if(a[i]>a[j])
                    cnt++;

        cout << "Minimum exchange operations : " << cnt << endl;
    }

    return 0;
}


a540
#include<iostream>
using namespace std;

int main(int argc, char** argv) {
  int n;
  while(cin>>n)
  {
  	if (n==0) break;
        
	  int money[10005]={0};
    int dp[10005]={0},sum=0;
        
    for(int i=1;i<=n;i++)
    {
      cin >> money[i];
        
	    if(dp[i-1]+money[i]>money[i]) 
        dp[i]=dp[i-1]+money[i];
      else
        dp[i]=money[i];

      sum=max(sum,dp[i]);
    }

    if(sum>0)
      cout << "The maximum winning streak is " << sum << ".\n";
    else
	    cout << "Losing streak.\n";
  }
    
  return 0;
}


a673
#include<iostream>
#include<algorithm>
using namespace std;

struct job{
  double quotient;
  int order;
};

bool cmp(job a,job b)
{
    if (a.quotient!=b.quotient)
        return a.quotient > b.quotient;
    else
        return a.order < b.order;
}

int main()
{
    int Case,N,T,F;

    cin >> Case;
    while(Case--)
    {
        cin >> N;
        job a[N];

        for (int i=0;i<N;i++)
        {
            cin >> T >> F;
            a[i].quotient=(double)F/(double)T;
            a[i].order=i+1;
        }

        sort(a,a+N,cmp);

        for (int i=0;i<N;i++)
            cout << a[i].order <<" ";
        cout << endl;
    }

    return 0;
}


a674
#include<iostream>
#include<cstring>
using namespace std;
int main()
{
    int c,s,q,c1,c2,d,Case=0,noise[101][101];
    while( cin >> c >> s >> q && c!=0 && s!=0 && q!=0)
    {
        memset(noise,0x3f,sizeof(noise));
        for(int i=0;i<s;i++)
        {
            cin >> c1 >> c2 >> d;
            noise[c1][c2]=noise[c2][c1]=d ;
        }

        for(int k=1;k<=c;k++)
            for(int i=1;i<=c;i++)
                for(int j=1;j<=c;j++)
                        noise[i][j]=min( noise[i][j],max(noise[i][k],noise[k][j]) );

        cout << "Case #" << ++Case << endl;
        while(q--)
        {
            cin >> c1 >> c2;;
            if(noise[c1][c2]!=0x3f3f3f3f)
                cout << noise[c1][c2] << endl;
            else
                cout << "no path" << endl;
        }
    }
}


a743
#include <iostream>
#include <map>
#include <sstream>
using namespace std;

/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int n;
	map<string,int> m;
	map<string,int>::iterator it;

	cin >> n;
	cin.get();
	
	while(n--)
	{
		string line,country;

		getline(cin,line);
		stringstream ss(line);
		ss >> country;
      	
		if(m.find(country)==m.end())
			m[country]=1;
		else
			m[country]++;
	}

	for(it=m.begin();it!=m.end();it++)
		cout << it->first << " " << it->second << endl;

	return 0;
}


a884
#include <iostream>
#include <cstring>
#define N 10001
using namespace std;

int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        string s1, s2;
        int ans[N]={0};

        cin >> s1 >> s2;

        if(s1.size()>s2.size())     //前面補0，讓長度一樣
            for(int i=s2.size();i<s1.size();i++)
                s2="0"+s2;
        else if(s1.size() < s2.size())
                for(int i=s1.size();i<s2.size();i++)
                    s1="0"+s1;

        bool negative=false;
        for(int i=0;i<s1.size();i--)    //判斷是否為-(s1<s2)
            if(s1[i]<s2[i])
            {
                negative=true;
                break;
            }

        if(!negative)                   //一律大-小，ans由最後往前放
            for(int i=s1.size()-1,pos=N-1 ; i>= 0; i--,pos--)
                ans[pos]+=s1[i]-s2[i];
        else
        {
            cout << "-";
            for(int i=s1.size()-1,pos=N-1 ; i>=0; i--,pos--)
                ans[pos]+=s2[i]-s1[i];
        }

        for(int i=0,pos=N-1; i<s1.length(); i++,pos--)    //借位
            if(ans[pos]<0)
            {
                ans[pos]+=10;
                ans[pos-1]--;
            }

        int h;
        for(h=0; h<=N-1 && ans[h]==0; h++);//找出最高位的位置

        if(h>=N)
        {
            cout << "0" << endl;
            break;
        }

        for(; h<=N-1; h++)
            cout << ans[h];
        cout << endl;
    }

    return 0;
}


b304
#include<iostream>
#include<stack>
using namespace std;

int main(int argc, char** argv) {
  int n;
  string s;
    
  cin >> n;
  getchar(); //讀掉n之後的Enter字元('\n'); 
   
  while (n--)
  {
    getline(cin,s);
    stack<char> stk;
    bool error=false;
        
    for(int i=0; i<s.length(); i++)
    {
      if( s[i]=='(' || s[i]=='[' )
		    stk.push(s[i]);
      else if( s[i]==')' )
      {
        if( stk.empty() || stk.top()!='(') //stack如果是空的，stk.top()會錯 
        {
         	error=true;
         	break;
		    }
		    stk.pop();
      }
      else if (s[i]==']')
      {
        if (stk.empty() || stk.top()!='[')
        {
         	error=true;
         	break;
		    }
		    stk.pop();
      }
    }
        
    if (!stk.empty())
      error=true;
		
    cout << (error ? "No":"Yes") << endl;
        
  }
}
 

b343
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> dominos[10001];
bool visited[10001];
int c;

void dfs(int u)
{
    c++;
    visited[u]=true;

    for(int i=0;i<dominos[u].size();i++) // u->dominuos[i]
        if(!visited[dominos[u][i]])
            dfs(dominos[u][i]);
}

int main()
{
    int t,n,m,l,x,y,z;

    cin >> t;
    while(t--)
    {
        c=0;
        fill(visited,visited+10001,false);
        for(int i=0;i<10001;i++)
            dominos[i].clear();

        cin >> n >> m >> l;
        for (int i=0;i<m;i++)
        {
            cin >> x >> y;
            dominos[x].push_back(y);
        }

        for(int i=0;i<l;i++)
        {
            cin >> z;
            if(!visited[z])
                dfs(z);
        }

        cout << c << endl;
    }

    return 0;
}


c001
#include<cstring>
#include<iostream>
using namespace std;

char s1[1001],s2[1001];
int dp[1001][1001];

int main(int argc, char** argv) {

  while (cin >> s1 >> s2)
	{
    memset(dp,0,sizeof(dp) );
          
    for (int i=1;i<=strlen(s1);i++ )
      for (int j=1;j<=strlen(s2);j++ )
        if (s1[i-1]==s2[j-1])
		    	dp[i][j]=dp[i-1][j-1]+1;
        else
			  	dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
          
    cout << dp[strlen(s1)][strlen(s2)] <<endl;
	}
  return 0;
}


c002
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int f(int n)
{
	if(n<=100)
		return f(f(n+11));
	else 
		return n-10;
}

int main(int argc, char** argv) {
	
	int n;
	while(cin>>n)
	{
		if(n==0)
			break;
		
		cout<< "f91(" << n << ") = " << f(n) <<endl;
	}
	return 0;
}


c004
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,s,d;
	
	cin >>n;
	for(int i=0;i<n;i++)
	{
		cin >> s >> d;
		if( s<d || (s%2)!=(d%2))
			cout << "impossible" << endl;
		else 
			cout << (s+d)/2 <<" "<< (s-d)/2 << endl;
	}
  
	return 0;
}

#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,s,d;
	
	cin >>n;
	for(int i=0;i<n;i++)
	{
		cin >> s >> d;
		if( s<d || (s+d)%2!=0)
			cout << "impossible" << endl;
		else 
			cout << (s+d)/2 <<" "<< (s-d)/2 << endl;
	}
	return 0;
}


c006
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int now,p1,p2,p3;

  while(cin >> now >> p1 >> p2 >> p3)
	{
		int sum=0;

    if(!now && !p1 && !p2 && !p3)
			break;
		
		sum+=720;
    sum+=((now-p1+40)%40)*9;//順時轉要「前-後」，0->30是10 
    sum+=360;
    sum+=((p2-p1+40)%40)*9;//逆時轉要「後-前」，0->30是30 
    sum+=((p2-p3+40)%40)*9;//順時轉要「前-後」 
    cout << sum << endl;
  }

	return 0;
}


c010
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int t,count=0,n[10000],pos,temp;
	
	while(cin >> n[count]){

		pos=count;
		while(n[pos]<n[pos-1])	//將輸入的數字向左移到正確排序的位置 
		{
			temp=n[pos];
			n[pos]=n[pos-1];
			n[pos-1]=temp;
			pos--;
		}
		
		count++;
		
		if(count%2==1)
			cout << n[count/2] << endl;
		else
			cout << (n[count/2-1]+n[count/2])/2 << endl; 
		
	}

	return 0;
}

#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int t,count=0,n[10000],pos,temp;
	
	while(cin >> n[count]){

		count++;
		sort(n,n+count);  //會TLE
		
		if(count%2==1)
			cout << n[count/2] << endl;
		else
			cout << (n[count/2-1]+n[count/2])/2 << endl; 
		
	}

	return 0;
}


c012
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int cmp(pair<int,int> a, pair<int,int> b)
{
    if (a.second != b.second)
        return (a.second < b.second);
    else
        return (a.first > b.first);
}

int main() {
    string line;

    while(getline(cin,line))
    {
        vector< pair<int,int> > v;  //pair<字母ascii code,數量>
        int freq[256]={0};

        for(int i=0;line[i]!='\0';i++) //計算每個字母數量
            freq[line[i]]++;

        for(int i=0;i<256;i++)
            if(freq[i]!= 0)
                v.push_back( make_pair(i,freq[i]) );

        sort(v.begin(),v.end(),cmp);

        for(int i=0;i<v.size();i++)
            cout << v[i].first << " " << v[i].second << endl;
    }
}


c013
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n,A,F,i,j,k,l;
	
	cin >> n;
	
	for(i=0;i<n;i++)
	{
		cin >> A >> F;

		for(j=0;j<F;j++)
		{
			for(k=1;k<=A;k++)
			{
				for(l=0;l<k;l++)
					cout << k;
				cout << endl;
			}
			
			for(k=A-1;k>0;k--)
			{
				for(l=0;l<k;l++)
					cout << k;
				cout << endl;
			}
			
			cout << endl;
		}
	}
	
	return 0;
}


c015
#include<iostream>
#include<cstdio>
using namespace std;

unsigned int reverse(unsigned int num)
{
    int rev=0;
    while(num>0)
    {
        rev=rev*10+num%10;
        num/=10;
    }

    return rev;
}

int main(){
    int n;
    cin >> n;
    while(n--)
    {
        unsigned int num,rev,cnt=0;
        cin >> num;
        rev=reverse(num);
        do{
            num+=rev;
            cnt++;
            rev=reverse(num);
        }while(num!=rev);
        cout << cnt << " " << num << endl;
    }

    return 0;
}


c022
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int n,a,b,sum;
  cin >>n; 
  for(int i=0;i<n;i++)
	{
    sum=0;
    cin >> a >> b;
    for(int j=a;j<=b;j++)
      if(j%2==1)
        sum+=j;
       
	   cout << "Case " << i+1 << ": " << sum << endl;
  } 
    
	return 0;
}


c034
#include <iostream>
#include <string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	string s;
	int sum[101]={0},begin;
    
	while(cin >> s)
	{
		if(s=="0")
			break;

		int len=s.length(),addendum[101]={0};
        
		for(int i=0;i<len;i++)
			addendum[i]=s[len-i-1]-'0'; //將被加數反向，計算其數值 
        
		for(int i=0;i<=len-1;i++)
			sum[i]+=addendum[i];
        
		for(int i=0;i<=len-1;i++)	//進位 
			if(sum[i]>=10)
			{
				sum[i]-=10;
				sum[i+1]++;
			}
	}

	for(begin=100;begin>=0;begin--)	//找第一個非零的位置 
		if(sum[begin]!=0)
			break;

	for(int i=begin;i>=0;i--)
		cout << sum[i];
	cout <<endl;
	
	return 0;
}


c036
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	float H,U,D,F;
	
	while( cin >> H >> U >> D >> F)
	{
		bool success=false;
		int day=0;
		float height=0,minus=U*F/100;
		
		if(!H)
			break;

		while(1)
		{	
			day++;
			
			height+=U;		//白天 
			if(height>H)	//是否爬出 
			{
				success=true;
				break;
			}
			
			height-=D;		//晚上 
			if(height<0)	//是否滑回井底結束 
				break;
			
			U-=minus;		//隔天能爬的高度減少 
			if(U<0)			//往上爬不能為負 
				U=0;
		}
		
		if(success)
			cout << "success on day "<< day << endl;
		else 
			cout << "failure on day "<< day << endl;
	}

	return 0;
}


c039
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int cl(int n){
  int i=1;
    
	while(n!=1){
    if(n%2==1)
			n=3*n+1;
    else
			n=n/2;
		i++;		
	}

	return i;
}

int main(int argc, char** argv) {
	
  int a,b,c,d;
  while(cin >> a >> b)
	{
    int ans=0;
    c=a;
    d=b;
        
		if(a>b)
			swap(a,b);
        
    for(int i=a;i<=b;i++)
			ans=max(ans,cl(i));
        cout << c << " " << d << " " << ans <<endl;
  }
	return 0;
}


c044
#include<iostream>
#include<algorithm>
using namespace std;

struct letter{
    char c;
    int num;
}a[26];

bool cmp(letter a,letter b)
{
    if(a.num != b.num)
        return a.num > b.num;
    else
        return a.c < b.c;
}
int main()
{
    int n;
    scanf("%d\n",&n);

    for(int i=0;i<26;i++)
        a[i].c=i+'A';

    while(n--)
    {
        string line;
        getline(cin,line);
        for(int i=0;i<line.size();i++)
            if(isalpha(line[i]))
                a[toupper(line[i])-'A'].num++;
    }

    sort(a,a+26,cmp);

    for(int i=0;i<26 && a[i].num>0;i++)
        cout << a[i].c << " " << a[i].num << endl;

    return 0;
}


c049
#include <iostream>
#include <cstdio>
using namespace std;

int main()
{
    int n;
    while(cin >> n)
    {
        double r=(n*2-1)/2.0;
        int all=0,part=0;

        for(int i=0; i<=r;i++)
            for(int j=0;j<=r;j++)
            {
                double d1=i*i+j*j, d2=(i+1)*(i+1)+j*j, d3=i*i+(j+1)*(j+1), d4=(i+1)*(i+1)+(j+1)*(j+1);
                //假設圓心在(0,0)，半徑為r，d1~d4為格子的四個點到圓心的距離
                if(d1<=r*r && d2<=r*r && d3<=r*r && d4<=r*r)
                    all++;
                else if(d1<=r*r || d2<=r*r || d3<=r*r || d4<=r*r)
                    part++;
            }

        printf("In the case n = %d, %d cells contain segments of the circle.\n", n, part*4);
        printf("There are %d cells completely contained in the circle.\n", all*4);
    }
    return 0;
}


c054
#include <iostream>
#include <algorithm>
#include <map>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char wrong[]="1234567890-=WERTYUIOP[]\\SDFGHJKL;'XCVBNM,./";//反斜線為"\\" 
  char right[]="`1234567890-QWERTYUIOP[]ASDFGHJKL;ZXCVBNM,."; 
	
	map<char,char> trans;
  char c;
	    
	for (int i=0;i<strlen(wrong);i++)//以wrong的字母為key，對應正確的字母 
		trans[ wrong[i] ]=right[i];


  while( (c=getchar()) != EOF )
	{
		if (trans.find(c) != trans.end())//找得到 
			putchar(trans[c]);
		else 
			putchar(c);
  }

	return 0;
}


c067
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int n,h[50],sum,ave,count,time=1;
	
	while(cin>>n)
	{
		if(n==0)
			break;
		sum=count=0;	
		
		for(int i=0;i<n;i++)
		{
			cin>>h[i];
			sum+=h[i];
		}
		ave=sum/n;
		
		for(int i=0;i<n;i++)
		{
			if(h[i]<ave)
			count+=ave-h[i];
		}
		
		cout<<"Set #" << time << endl << "The minimum number of moves is " << count<<"."<<endl<<endl;
		time++;
	}
  
	return 0;
}


c074
#include<iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int kNum,luck[13];

	while(cin >> kNum && kNum != 0)
	{
		for(int i=0;i<kNum;i++)
			cin >> luck[i];
        
		for(int i=0;i<kNum;i++)
			for(int j=i+1;j<kNum;j++)
				for(int k=j+1;k<kNum;k++)
					for(int l=k+1;l<kNum;l++)
						for(int m=l+1;m<kNum;m++)
							for(int n=m+1;n<kNum;n++)
								cout << luck[i] << " " << luck[j] << " " << luck[k] << " " << luck[l] << " " << luck[m] << " " << luck[n] << endl;
		cout << endl;
	}    


	return 0;
}


c077
#include <iostream>
#include <map>
#include <queue>

using namespace std;

int main()
{
    map<string,int> m;
    queue<string> q;
    string word;
    int cnt=1;

    for(char c='a';c<='z';c++)  //先放a~z
    {
        word=c;
        q.push(word);
        m[word]=cnt++;
    }

    while(!q.empty())
    {
        string now=q.front();
        q.pop();
        int len=now.size();

        if(len<5)
        {
            for(char c=now[len-1]+1;c<='z';c++)
            {
                word=now+c;
                q.push(word);
                m[word]=cnt++;
            }
        }
    }

    string line;
    while(cin >> line)
    {
        map <string,int>::iterator it=m.find(line);
        cout << ( it==m.end() ? 0 : it->second ) << endl;
    }

    return 0;
}


c094
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int n,m,c,seq=1;
	
	while (cin >> n >> m >> c)
	{
		int jump[21]={0},current[21],s,now=0,max=0;

		if ( n==0 && m==0 && c==0 )
			break;
    
		for(int i=1;i<=n;i++) 
			cin >> current[i];
    
		for(int i=0;i<m;i++)
		{
			cin >> s;
			if (jump[s]==0)
			{
				now +=current[s];
				if (now>max) 
					max=now;
				jump[s]=1;
			}
			else if (jump[s]==1)
			{
				now -=current[s];
				jump[s]=0;
			}
		}

		cout << "Sequence " << seq++ << endl; 
		if (max > c) 
			cout << "Fuse was blown."<< endl;
		else
		{
			cout << "Fuse was not blown." << endl;
			cout << "Maximal power consumption was " << max << " amperes." << endl;   
		}    
	}
	return 0;
}


c100
#include <iostream>
#include <cstdio>
#define inf 2147483647

using namespace std;

int main()
{
    int m,n;
    while(cin >> m >> n) //m列、n欄
    {
        int graph[m][n]={0},dp[m][n]={0},path[m][n]={0},a,b,c,mini,ans,id;

        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                cin >> graph[i][j];

        //從右向左掃描，以解決要求輸出字典序最小的問題。
        for(int j=n-1;j>=0;j--) //欄
        {
            for(int i=0;i<m;i++)//列
            {
                a=dp[(i-1+m)%m][j+1];   //右上
                b=dp[i][j+1];           //右
                c=dp[(i+1)%m][j+1];     //右下
                mini=min(a,min(b,c));

                dp[i][j]=graph[i][j]+mini;
                path[i][j]=inf;
                if(mini==a)
                    path[i][j]=(i-1+m)%m; //記錄列編號
                if(mini==b)
                    path[i][j]=min(path[i][j],i);
                if(mini==c)
                    path[i][j]=min(path[i][j],(i+1)%m);
            }
        }

        ans=inf;
        for(int i=0;i<m;i++) //找第1欄最小值
            if(dp[i][0]<ans)
            {
                ans=dp[i][0];
                id=i;
            }

        cout << id+1;
        id=path[id][0];
        for(int j=1;j<n;j++)
        {
            cout << " " << id+1;
            id=path[id][j];
        }
        cout << endl << ans << endl;

    }

    return 0;
}


c112
#include <iostream>
#include <cstring>
using namespace std;

int dp[11][11],cut[11][11];
void print(int l,int r)
{
    if(l==r)
        cout << "A" << l+1;
    else
    {
        cout << "(";
        print(l,cut[l][r]);
        cout << " x ";
        print(cut[l][r]+1,r);
        cout << ")";
    }
}

int main()
{
    int n,Case=0,r[11],c[11];
    while(cin >> n && n!=0)
    {
        memset(dp, 0x7f, sizeof(dp)); //初值設為最大值
        for(int i=0;i<n;i++)
        {
            cin >> r[i] >> c[i];
            dp[i][i]=0;
        }

        //f(i,j) = min { f(i, k) + f(k+1, j) + r[i]*c[k]*c[j] } i?k< j
        //f(i,j)：從第i個矩陣乘到第j個矩陣，最少的相乘次數。
        for(int l=1;l<n;l++)    //l為包含的矩陣個數
        {
            for(int i=0;i<n-l;i++)
            {
                int j=i+l;
                for(int k=i;k<j;k++)
                {
                    if (dp[i][j]>=dp[i][k]+dp[k+1][j]+r[i]*c[k]*c[j]) //預設答案是當有多組解時, 在左邊的括號裡放進最多的陣列。所以要加=
                    {
                        dp[i][j]=dp[i][k]+dp[k+1][j]+r[i]*c[k]*c[j];
                        cut[i][j]=k;
                    }
                }
            }
        }

        cout << "Case " << ++Case << ": ";
        print(0,n-1);
        cout << endl;
    }

    return 0;
}


c117
#include <iostream>
#include <queue>
#include <cstring>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

struct point
{
    int x,y,step;
};

int main(int argc, char** argv) {
	char s1[3],s2[3];
	int dir[8][2]={{1,2},{-1,2},{1,-2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};
    
	while(cin >> s1 >> s2)
	{
		point now,next;
		queue<point> q;

		int visted[8][8];
		memset(visted,0,sizeof(visted));

		int x1,y1,x2,y2;
		x1=s1[0]-'a';
		y1=s1[1]-'1';
		x2=s2[0]-'a';
		y2=s2[1]-'1';

		now.x=x1;
		now.y=y1;
		now.step=0;
		visted[x1][y1]=1;
		q.push(now);

		while(!q.empty())
		{
			now=q.front();
			q.pop();

			if(now.x==x2 && now.y==y2)
			{
				cout << "To get from " << s1 << " to " << s2 << " takes " << now.step << " knight moves.\n";
				break;
			}
        
			for(int i=0;i<8;i++)
			{
				next.x=now.x+dir[i][0];
				next.y=now.y+dir[i][1];
				next.step=now.step+1;
				if(next.x>=0 && next.x<8 && next.y>=0 && next.y<8)
				{
					visted[next.x][next.y]=1;
					q.push(next);
				}
			}
		}

	}
   
	return 0;
}


c119
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int f[1001][2600],ans[1001]={1,1};

int main(int argc, char** argv) {

	int len=0,n;
	
	f[0][0]=f[1][0]=1;
	for(int i=2;i<=1000;i++) //計算2!~1000! 
  	{
		for(int j=0;j<=len;j++)
		{
			f[i][j]+=f[i-1][j]*i;
			if (f[i][j]>=10)
			{
				f[i][j+1]+=f[i][j]/10;
				f[i][j]%=10;
				if(j+1>len) 
					len=j+1;
			}
			ans[i]+=f[i][j];
		}

	}

	while(cin >> n)
		cout << ans[n] << endl;
	
	return 0;
}


c122
#include<iostream>
#include<string>
#include<set>
#include<vector>
using namespace std;
typedef long long ll;  ///第5842個數為2000000000，要設為long long
int main()
{
    set<ll> s;
    set<ll>::iterator it;

    s.insert(1);
    it=s.begin();

    while(s.size() < 6600)
    {
        s.insert(*it * 2);
        s.insert(*it * 3);
        s.insert(*it * 5);
        s.insert(*it * 7);
        it++;
    }

    vector<ll> v(s.begin(),s.end());
    int n;
    string ordinal;
    while(cin >> n && n!=0)
    {
        if(n%100==11 || n%100==12 || n%100==13) ordinal="th";
        else if(n%10==1) ordinal="st";
        else if(n%10==2) ordinal="nd";
        else if(n%10==3) ordinal="rd";
        else ordinal="th";
        cout << "The " << n << ordinal << " humble number is " << v[n-1] << ".\n";
    }
    return 0;
}


c123
#include <iostream>
#include <stack>
using namespace std;

int main()
{
    int b[1000],n;

    while(cin >> n && n!=0 )
    {
        while(cin >> b[0] && b[0]!=0)
        {
            int bIdx=0;
            stack<int> station;

            for(int i=1;i<n;i++)
                cin >> b[i];

            for(int i=1;i<=n;i++)
            {
                station.push(i);        //依序將A的車箱放入station

                while(!station.empty() && station.top()==b[bIdx])
                {  //如果stack最上面的編號==b的編號，pop至b，b已檢查長度加1。如果不是則後面車箱繼續push進去。
                    station.pop();
                    bIdx++;
                }
            }

            cout << (station.empty()?"Yes":"No" ) << endl;
        }
    }

return 0;
}


c125
#include <iostream>
#include <cstdio>
#include <cmath>
#include <queue>
#define N 201
using namespace std;

struct coordinate
{
    int x,y;
}stone[N];

int main()
{
    int n,Case=1;
    while(cin >> n && n!=0)
    {
        for(int i=0;i<n;i++) //第0點起點、第1點終點
            cin >> stone[i].x >> stone[i].y;

        //SPFA
        float d[N]={0};  //d[]的意義改成路經上石頭間的最大值
        bool inQ[101]={0};
        queue<int> Q;
        for (int i=1;i<n;i++)
            d[i]=1e9;

        Q.push(0);
        while(!Q.empty())
        {
            int idx=Q.front();
            Q.pop();
            inQ[idx]=false;

            for(int i=1;i<n;i++)
            {
                //比較從起點到 idx 的minmax 和 idx到i的距離，兩個的 minmax distance，較大的則為這條路徑(從起點到i)的minmax distance
                float idx_i_dist=sqrt( (stone[idx].x-stone[i].x)*(stone[idx].x-stone[i].x)+(stone[idx].y-stone[i].y)*(stone[idx].y-stone[i].y) );
                float maxx=max(d[idx], idx_i_dist);

                if(maxx<d[i]) //看是否有比原本的 minmax distance 小
                {
                    d[i]=maxx;
                    if(!inQ[i])
                    {
                        Q.push(i);
                        inQ[i]=true;
                    }
                }
            }
        }

        printf("Scenario #%d\nFrog Distance = %.3f\n\n", Case++, d[1]);
    }

    return 0;
}

c126
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

void traversal(string preOrder,string inOrder,string &postOrder)
{
	if(preOrder.size()>0)
	{
		string preLeft,preRight,inLeft,inRight;
		char root=preOrder[0];
		int rootPos=inOrder.find(root);  //在inOrder中root的位置 

		inLeft=inOrder.substr(0,rootPos);
		inRight=inOrder.substr(rootPos+1);
		preLeft=preOrder.substr(1,inLeft.size());
		preRight=preOrder.substr(inLeft.size()+1);

		traversal(preLeft,inLeft,postOrder);	//左子樹 
		traversal(preRight,inRight,postOrder);	//右子樹 
		postOrder+=root;
	}
}

int main(int argc, char** argv) {

	string preOrder,inOrder;
	while(cin>>preOrder>>inOrder)
	{
		string postOrder="";
		traversal(preOrder,inOrder,postOrder);
		cout<<postOrder<<endl;
	}
    
	return 0;
}


c128
#include <iostream>
#include <map>
using namespace std;
int main()
{
    int n,r,t=0;
    while (cin >> n >> r && n!=0 && r!=0)
    {
        map<string,int> idx;
        string c1,c2;
        int d[n+1][n+1]={0},w,num=0;

        for(int i=0;i<r;i++ )
        {
            cin >> c1 >> c2 >> w;
            if(idx[c1]==0)
                idx[c1]=++num;
            if(idx[c2]==0)
                idx[c2]=++num;

            d[idx[c1]][idx[c2]]=w;
            d[idx[c2]][idx[c1]]=w;
        }

        for(int k=1;k<=n;k++)
            for(int i=1;i<=n;i++)
                for(int j=1;j<=n;j++)
                    d[i][j]=max(d[i][j], min(d[i][k],d[k][j]));

        string src, dst;
        cin >> src >> dst;
        cout << "Scenario #" << ++t << endl << d[idx[src]][idx[dst]] << " tons\n\n";
    }

    return 0;
}


c129
#include<iostream>
#include<cstring>
using namespace std;
bool map[102][102];

void dfs(int r,int c)
{
    map[r][c]=false;

    for(int i=-1;i<=1;i++)
        for(int j=-1;j<=1;j++)
            if (map[r+i][c+j])
                dfs(r+i,c+j);
}
int main()
{
    int m,n;
    while(cin >> m >> n && m!=0 && n!=0)
    {
        int ans=0;
        string line;

        memset(map,0,sizeof(map));
        for(int i=1;i<=m;i++)   //從(1,1)開始放
        {
            cin >> line;
            for(int j=0;j<n;j++)
                if(line[j]=='@')
                    map[i][j+1]=true;
        }

        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
                if(map[i][j])
                {
                    ans++;
                    dfs(i,j);
                }

        cout << ans << endl;
    }
}


c131
#include <iostream>
#include <cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int set[100000];
  
int findSet(int v){
	if (set[v]==v) 
		return v;
	else
		return set[v]=findSet(set[v]);
}

int main(int argc, char** argv) {

	int a,b,T=1;  
	while(cin >> a >> b && a >= 0 && b >= 0) 
	{  
		bool tree=true;
		memset(set,-1,sizeof(set));
        
		while ( a>0 || b>0 ) 
		{  
			if(set[a]==-1) set[a]=a;  
			if(set[b]==-1) set[b]=b; 
            
			if( findSet(a)==findSet(b) ) //a,b兩點在同一集合，表示有環，不是樹 
				tree=false;  

			if(tree==true)
				set[findSet(b)] = findSet(a);  

			cin >> a >> b;  
		}  

		if(tree==true)
		{  
			int count=0;  
			for(int i=0;i<100000;i++)  
				if(set[i]!=-1 && findSet(i)==i) //樹只能有一個樹根。只有樹根set[i]==i 
					count++;

			if(count>1)
				tree=false;  
		}  
          
		if(!tree)  
			cout << "Case " << T++ << " is not a tree.\n";
		else 
			cout << "Case " << T++ << " is a tree.\n";
	}  	
	
	return 0;
}

    
c134
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int a[50],n,m;
	
	cin >> n;
  while(n--)
	{
  	int group=1;
		cin >> m;
    	
   	for(int i=2;i<=m;i++) //每組人數從2開始，分k組。n-(2+3+...+k)<k+1結束。(最後剩下的不足K+1人)
		{                                       
      a[group++]=i;
      m=m-i;        
   	}
    
		for(int i=group-1;i>0;i--) //將剩餘的人n-(2+3+...+k)，由k組開始往回(k,k-1,k-2....2)，每組分一個人，分完為止
		{
			a[i]++;        
      m--;
      if(m <=0)
				break;
    }
    	
		a[group-1]+=m; //若還有剩最後一位，給k
    
		for(int i=1;i<group;i++)
      cout << a[i] << " ";        
    
    cout << endl;           
	}
  return 0;
}


c813
#include <iostream>
using namespace std;
int f(int n)
{
    int sum=0;
    while(n!=0)
    {
        sum+=n%10;
        n/=10;
    }
    return sum;
}

int main()
{
    int n;
    while(cin>>n && n>0)
    {
        do{
            n=f(n);
        }while(n>=10);

        cout << n << endl;
    }

    return 0;
}


d038
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
typedef long long LL;

int main(int argc, char** argv) {
  LL dp[51]={0,1,2},n;
  
  for(int i=3;i<=50;i++)
    dp[i]=dp[i-1]+dp[i-2];

  while(cin >> n && n)
  {
    cout << dp[n] << endl;
  }

	return 0;
}




d039
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int t,n,m;
	
  cin >>t;
	while(t--)
	{
		cin >> n >>  m;
		cout << (n/3)*(m/3) << endl;
	}	
	
	return 0;
}


d052
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
    int t,n;
    cin >> t;
    while(t--)
    {
        cin >> n;
        int ans=0,t[n],lis[n],lds[n];
        //lis[i]代表t[0~i]最長的遞增長度
        //lds[i]代表t[0~i]最長的遞減長度

        for(int i=n-1;i>=0;i--)
            cin >> t[i];
        fill(lis,lis+n,1);
        fill(lds,lds+n,1);

        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(t[i]<t[j])
                    lis[j]=max(lis[j],lis[i]+1);
                else if(t[i]>t[j])
                    lds[j]=max(lds[j],lds[i]+1);
            }
            ans=max(ans,lis[i]+lds[i]-1);
        }

        cout << ans << endl;
    }

    return 0;
}


d053
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int m,n;
	
	while(cin >> m >> n)
	{
		cout <<m-1+m*(n-1)  << endl;
	}	
	
	return 0;
}


d055
#include <iostream>
#include<cmath>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {

	int n;
	double Ax,Ay,Bx,By,Cx,Cy,area;

	cin >> n;
	for(int i=0;i<n;i++)
	{
		cin >> Ax >> Ay >> Bx >> By >> Cx >> Cy;
		area=fabs(Ax*By+Bx*Cy+Cx*Ay-Ay*Bx-By*Cx-Cy*Ax)/2.0;  
		printf("%.0lf\n",area/7);  
	}

	return 0;
}


d057
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int x1,y1,x2,y2;
  	
  while(cin >> x1 >> y1 >> x2 >> y2){
        
	if(!x1 && !y1 && !x2 && !y2) break;

        if(x1 == x2 && y1 == y2) 
          cout << "0" << endl;
        else if(x1 == x2 || y1 == y2 || abs(x2-x1) == abs(y2-y1))
          cout << "1" << endl;
        else 
          cout << "2" << endl;
  }
  
  return 0;
}


d095
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

int main()
{
    int h,m;
    float h_angle,m_angle,ans;
    char colon;
    while( cin >> h >> colon >> m && !(h==0 && m==0) )
    {

        h_angle=h*30+m/60.0*30;
        m_angle=m*6;

        ans=fabs(h_angle-m_angle);

        if(ans > 180)
            ans=360-ans;

        cout << fixed << setprecision(3) << ans << endl;
    }

    return 0;
}


d096
#include<iostream>
using namespace std;

int main()
{
    long long int N,row,lastNum;
    while(cin >> N)
    {
        long long int row;
        row=(N+1)/2;            //有n個數字為第幾列
        lastNum=row*row*2-1;    //那一列的最後一個數字
        cout << 3*lastNum-6 << endl;
    }
    return 0;
}


d097
#include <iostream>
#include <cstdlib>
using namespace std;

int main()
{
    int n;
    while (cin >> n)
    {
        int num[n+1]={0},diff[n]={0},jolly=1;

        for (int i=1;i<=n;i++)
            cin >> num[i];

        for (int i=1;i<=n-1;i++)
            diff[abs(num[i+1]-num[i])]=1;

        for (int i=1;i<=n-1;i++)
            if (diff[i]==0)
                jolly=0;

        cout << (jolly? "Jolly":"Not jolly") << endl;
    }

    return 0;
}


d111
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
    unsigned int n,s;
    while(cin >> n && n!=0)
    {
        s=sqrt(n);
        cout << ( n==s*s ? "yes":"no" ) << endl;
    }

    return 0;
}


d117
#include <iostream>
#include <string>
#include <cmath>
using namespace std;

short isPrime(int n)
{
      bool isPri=false;

      for(int i=2;i<=sqrt(n);i++)
          if(n%i==0)
          {
             isPri=true;
             break;
          }

      return isPri;
}

int main()
{
    string s;
    while(cin >> s)
    {
        int sum=0;
        for(int i=0;i<s.size();i++)
            if( (int)s[i] > 96 )
                sum+=(int)(s[i])-96;
            else
                sum+=(int)(s[i])-38;

		cout << ( isPrime(sum) ? "It is not a prime word." : "It is a prime word." ) << endl ;
	}

}


d129
#include <iostream>
#include<set>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  set<long long int> uglyNum;
  set<long long int>::iterator p;
  uglyNum.insert(1);

  for (int i=0;i<1500;i++)
  {
     p = uglyNum.begin();
     uglyNum.insert(*p * 2);
     uglyNum.insert(*p * 3);
     uglyNum.insert(*p * 5);
     uglyNum.erase(*p);
  }

  cout << "The 1500\'th ugly number is " << *p << '.' << endl;

	return 0;
}


d150
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
	int num[20000],n,t;
    
  cin >>t;
	for (int i=0;i<t;i++) 
  {
  	int sum=0;
   	cin >> n;
       for(int i=0;i<n;i++)
		cin >> num[i];
        
		sort(num,num+n);
       reverse(num, num+n);
	 
    for(int i=2;i<n;i+=3)
			sum+=num[i];
  
    cout << sum << endl;
  }

	return 0;
}


d186
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int a,b,sum;
	while(cin >> a >> b) 
	{
		if (a==0 && b==0)
			break;
			
		sum=0;
		for(int i=sqrt(a);i<=sqrt(b);i++)
		{
			if(i*i>=a && i*i<=b )
				sum++;
		}
		cout <<sum << endl;
	}
  
	return 0;
}


#include <iostream>
#include<vector>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  vector<int> v;
    
  for (int i=0;i<=317;i++)
    v.push_back(i*i);

  int a ,b;
  vector<int>::iterator low,up;

  while(cin >> a >> b && a!=0 && b!=0)
  {
   	low=lower_bound(v.begin(),v.end(),a);
   	up=upper_bound(v.begin(),v.end(),b);
   	cout << up-low <<endl; 
  }
	
	return 0;
}


d189
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
   
	int n,sum;
   
	while (cin >>n )
	{
		sum=n;
               
		while (n>=3)
		{
			sum=sum+n/3;
			n=n%3+n/3;
		}
         
		if (n==2)
			sum++;
        
		cout << sum <<endl;
	}
  
	return 0;
}


d192
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int josephus(int n,int k)
{
	if (n==1)
		return 0;
	else
		return (josephus(n-1,k)+k)%n;
}

int main(int argc, char** argv) {
	int t,n,k;

	cin >> t;
	for (int i=1;i<=t;i++)
	{
		cin >> n >> k;
		cout << "Case " << i << ": " << josephus(n,k)+1 << endl;
	}

	return 0;
}


d194
#include <iostream>
#include<set>
#include<queue>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

	int T,n,x,max,QSize;
    
	cin >> T;
	while(T--)
	{
		set<int> S;
		queue<int> Q;
		max=0;
        
		cin >> n;
        
		for(int i=0;i<n;i++)
		{
			cin >> x;       
			     
			//如果x已存在集合中，表示相異子序列已結束，所以依序將Q和S中x之前的元素刪除，並從原來x的後一個繼續子序列。 
			while(S.count(x))	                //count(x)取得集合中x的數量，==1表示x已存在 
			{					
				S.erase( S.find( Q.front() ) ); //用S.find找出Q的第一個元素，並將其刪除 
				Q.pop();						            //將Q第一個元素刪除 
			}
			
			S.insert(x);
			Q.push(x);
			QSize=Q.size();
            
			if(QSize>max)
				max=QSize;
		}

		cout << max << endl;
	}
  
	return 0;
}


d198
#include <iostream>
#include <cstdio>
#include <sstream>
#include <cstring>
#include <cstdlib>
using namespace std;
int main()
{
    int T,w,n;
    cin >> T;
    while(T--)
    {
        long long int dp[110][110]={0};
        bool obstacle[110][110]={0};

        cin >> w >> n;
        cin.ignore();               //丟掉換行
/*uva 會過，zj會WA
        string line;
        for (int i=1,j;i<=w;i++)
        {
            getline(cin,line);
            stringstream ss(line);
            ss >> j;                //第一個數字忽略
            while (ss >> j)
                obstacle[i][j]=true;
        }
*/
        char input[100000];
        for(int i=0;i<w;i++)
        {
        	fgets(input,sizeof(input),stdin);
        	bool first=true;
        	int r;
        	char *ptr=strtok(input," ");

        	while(ptr!=NULL)
        	{
        		if(first)
        		{
        		    r=atoi(input);
        		    first=false;
        		}
        		else
        		    obstacle[r][atoi(ptr)]=true;
	        	ptr=strtok(NULL," ");
        	}
        }

        dp[0][1]=1;
        for (int i=1;i<=w;i++)
            for (int j=1;j<=n;j++)
                if(!obstacle[i][j])
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];

        cout << dp[w][n] << endl;
    }
}


d206
#include <iostream>
#include<climits>
using namespace std;

int main()
{
    int n;

    while ( cin >> n)
    {
        int sum[n+1][n+1]={0},num,ans=INT_MIN;

        for (int i=1;i<=n;i++)
            for (int j=1;j<=n;j++)
            {
                cin >> num;
                sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+num;
            }

        for (int x1=1;x1<=n;x1++) //(x1,y1)
            for (int y1=1;y1<=n;y1++)
                for (int x2=x1;x2<=n;x2++) //(x2,y2)
                    for (int y2=y1;y2<=n;y2++)
                        ans=max(ans,sum[x2][y2]-sum[x1-1][y2]-sum[x2][y1-1]+sum[x1-1][y1-1]);

        cout << ans << endl;
    }

    return 0;
}


d219
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
typedef long long int lli;

lli mod(lli b,lli p,lli m)
{   
	if(p==0)
		return 1;
	else if(p==1)
		return b%m;
	else
	{
		lli ans=mod(b,p/2,m);
		if(p%2==1)
			return ans*ans*b%m;  //p為奇數，再乘一個 b 
		else
			return ans*ans%m;
	}
}

int main(int argc, char** argv) {
	lli b,p,m;

	while(cin >> b >> p >> m)
	{
		cout << mod(b,p,m) << endl;
	}

	return 0;
}


d221
#include<iostream>
#include<queue>
using namespace std;

int main()
{
    int n,x;
    while(cin >> n && n!=0)
    {
        long long int sum=0;
        priority_queue<int,vector<int>,greater<int> > pq;

		for (int i=0;i<n;i++)
		{
			cin >> x;
			pq.push(x);
		}

		while(pq.size()>1)
		{
			int s1,s2;
			s1=pq.top();
			pq.pop();
			s2=pq.top();
			pq.pop();
			pq.push(s1+s2);
			sum+=s1+s2;
		}
		cout << sum << endl;
    }
}


d226
#include <iostream>
#include<string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    int v, t;
    while( cin >> v >> t )
        cout << 2*v*t << endl;
    return 0;
}


d235
#include <iostream>
#include<cmath>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  char n[1000];

  while(cin >> n){
    if(n[0] == '0')
	   	break;

    int odd=0,even=0;

    for(int i=0;i<strlen(n);i++)
		{
      if(i%2 == 1) 
				odd+=(n[i]-'0');
      else 
				even+=(n[i]-'0');
    }

    if(abs(odd-even)%11 == 0)
      cout << n << " is a multiple of 11.\n";
    else
      cout << n << " is not a multiple of 11.\n";

  }
  
	return 0;
}


d242
#include <iostream>
#include<vector>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;
int data[500005],position[500005];

int main(int argc, char** argv) {
    int count=0;
    vector<int> V;
    
    while( scanf("%d",&data[count]) != EOF )  
        count++;
    
    V.push_back(data[0]);
    position[0]=1;
	
    for(int i=1;i<count;i++)
    {
        int pos=lower_bound(V.begin(),V.end(),data[i])-V.begin(); //找到在V中要放的位置 
        if(pos==V.size()) //最後一個 
        {
        	V.push_back(data[i]);
		      position[i]=V.size();
	      }
        else //取代該位置的元素 
	      {
		      V[pos]=data[i];
		      position[i]=pos+1;	
	      }
    }

    cout << V.size() << endl << "-" << endl;
    
    vector<int> output;
    output.clear();
    
    for(int i=count-1,len=V.size();i>=0;i--)
    {
        if(position[i]==len)
        {
		      output.push_back(data[i]);
		      len--;
	      }
    }
    
    for(int i=output.size()-1;i>=0;i--)
	    cout << output[i] << endl;
  
    return 0;
}


d253
#include <iostream>
using namespace std;
int main()
{
    int n,coin[5]={1,5,10,25,50},method[7490]={1,0};

    for(int i=0;i<5;i++)
        for(int j=0;j+coin[i]<7490;j++)
            method[j+coin[i]]+=method[j];

    while(cin >> n)
        cout << method[n] << endl;

    return 0;
}


d255
#include <iostream>
using namespace std;

int gcd(int a,int b)
{
    if(b==0)
  		return a;
    else 
	   	return gcd(b,a%b);
}

int main(int argc, char** argv) {
	
  int n,g;
  while(cin >> n && n!=0)
	{
        int g=0;
        for(int i=1;i<n;i++)
            for(int j=i+1;j<=n;j++)
	       			g+=gcd(i,j);

        cout << g << endl;
  }
    
  return 0;
}


d256
#include<iostream>
using namespace std;
int main()
{
    int T,G,L;
    cin >> T;
    while(T--)
    {
        cin >> G >> L;
        if(L%G==0)
            cout << G << " " << L << endl;
        else
            cout << -1 << endl;
    }
}


d267
#include <iostream>
#include <string>
using namespace std;

int main()
{
    int T;
    cin >> T;
    cin.ignore();

    while(T--)
    {
        int maxx=0,freq[26]={0};
        string s;
        getline(cin,s);

        for(int i=0;i<s.size();i++)
            if(isalpha(s[i]))
                freq[tolower(s[i])-'a']++;

        for(int i=0;i<26;i++)
            if(maxx<freq[i])
                maxx=freq[i];

        for(int i=0;i<26;i++)
            if(freq[i]==maxx)
                cout << (char)('a'+i);
        cout <<endl;
    }

    return 0;
}


d269
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
double a[100000];

void quickSort(double a[],int left,int right)
{
    if(left<right)
    {
        int i=left,j=right,pivot=a[left];  //最左邊的元素設為pivot

        while(i<j)
        {
            while(a[i] <= pivot && i<right)//向右找大於pivot的元素。要有=不然第1次自己<自己不會向右
                i++;
            while(a[j] > pivot)//向左找小於pivot的元素
                j--;

            if(i<j)
                swap(a[i],a[j]);//小於pivot的放左邊，大於pivot的放右邊
        }

        swap(a[left],a[j]);//pivot交換至中間
        quickSort(a,left,j-1);
        quickSort(a,j+1,right);
    }
}

double area(double a, double b, double c)
{
    if(a+b>c || b+c>a || c+a>b)
    {
        double s=(a+b+c)/2;
        return sqrt(s*(s-a)*(s-b)*(s-c));
    }
    else
        return 0;
}

int main()
{
    int T,n;
    cin >> T;
    while(T--)
    {
        cin >> n;
        for(int i=0;i<n;i++)
            cin >> a[i];

        quickSort(a,0,n-1);

        double maxArea=0;
        for(int i=n-1;i>1;i--)
            maxArea=max(maxArea,area(a[i],a[i-1],a[i-2]));

        printf("%.2lf\n",maxArea);
    }

    return 0;
}


d282
#include <iostream>
#include <algorithm>
#include <map>
using namespace std;
int main()
{
    int dis[23][23],n,m,u,v,c,Case=0;

    while(cin >> n >> m && n!=0)
    {
        string  name;
        map<int, string> mp;

        for(int i=1;i<=n;i++)
        {
            cin >> name;
            mp[i]=name;
        }

        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                dis[i][j]=( i==j ? 0 : 1e9 );

        for(int i=1;i<=m;i++)
        {
            cin >> u >> v >> c;
            dis[u][v]=dis[v][u]=c;
        }

        for(int k=1;k<=n;k++)
            for(int i=1;i<=n;i++)
                for(int j=1;j<=n;j++)
                    if(dis[i][k]+dis[k][j] < dis[i][j])
                        dis[i][j]=dis[i][k]+dis[k][j];

        int id=0,min=1e9;
        for(int i=1;i<=n;i++)
        {
            int cost=0;
            for(int j=1;j<=n;j++)
                cost+=dis[i][j];

            if(cost<min)
            {
                min=cost;
                id=i;
            }
        }

        cout << "Case #" << ++Case << " : " << mp[id] << endl;
    }
    return 0;
}


d324
#include <iostream>
#include <string>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int queen[8],num;//index為col， 值為row
int rr,cc;

bool attack(int row,int col)
{
	int i=0,atk=false;
	while(!atk && i<col)//從頭檢查是否衝到 
	{
		if (queen[i]==row || abs(i-col)==abs(queen[i]-row) ) //在同一列或對角 
			atk=true;
		i++;
	}
	return atk;
}

void output()
{
  if (queen[cc-1]==rr-1)
  {
	cout <<" "<<num++<<"      ";
	for(int i=0;i<8;i++)
	      cout << queen[i]+1 <<" ";        
	cout << endl;    
  }    
}

void place(int q){	//填第q個皇后，即第幾col 
	int r=0;
	while(r<8)
	{
		if (!attack(r,q))
		{
			queen[q]=r;	//存皇后在第幾row
			if (q==7) 
				output();
			else 
				place(q+1);
		}
		r++;
	}
}

int main(int argc, char** argv) {
	int t;
	
	cin >> t;
	while(t--){
		num=1;
		cin >> rr >> cc;
		cout <<"SOLN       COLUMN"<<endl;
		cout <<" #      1 2 3 4 5 6 7 8"<<endl<<endl; 

		place(0);

		cout <<endl;
  }
}


d361
#include<iostream>
#include<string>
using namespace std;

int main()
{
    int r[10][4]={
    {0,0,0,0},
    {1,1,1,1},
    {6,2,4,8},
    {1,3,9,7},
    {6,4,6,4},
    {5,5,5,5},
    {6,6,6,6},
    {1,7,9,3},
    {6,8,4,2},
    {1,9,1,9}};
    string m,n;

    while(cin >> m >> n && !(m=="0" && n=="0"))
    {
        if(n=="0")
            cout << 1 << endl;
        else
        {
            int a=m[m.size()-1]-'0',b=0;

            for(int i=0;i<n.size();i++)
                b=(b*10+n[i]-'0')%4;

            cout << r[a][b] << endl; // a^b
        }
    }
    return 0;
}


d362
#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;
const int PRIME_MAX=20000001;
int main(){
    vector<bool> prime(PRIME_MAX,true); //vector大小為20000001，初值為true
    vector<int> twinPrimes;
    prime[0]=false;
    prime[1]=false;

    for(int i=2;i<=PRIME_MAX;i++)
    {
        if(prime[i])
        {
            for(int j=i+i;j<=PRIME_MAX;j+=i)   //i的倍數都不是質數
                prime[j]=false;
        }
        if(prime[i] && prime[i-2])
            twinPrimes.push_back(i-2);
    }

    int n;
    while (cin >> n)
        printf("(%d, %d)\n",twinPrimes[n-1],twinPrimes[n-1]+2);

    return 0;
}


d365
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;

char map[1001][1001]={0};
bool visited[1001][1001]={0};

void dfs(int r, int c)
{
    visited[r][c]=1;
    if( map[r+1][c]==map[r][c] && !visited[r+1][c] )    //右
        dfs(r+1,c);
    if( map[r][c+1]==map[r][c] && !visited[r][c+1] )    //下
        dfs(r,c+1);
    if( map[r-1][c]==map[r][c] && !visited[r-1][c] )    //左
        dfs(r-1,c);
    if( map[r][c-1]==map[r][c] && !visited[r][c-1] )    //上
        dfs(r,c-1);
}

int main(){
    int N,Case=0;
    cin >> N;
    while(N--)
    {
        int H,W,letter[26]={0},state=0;
        memset(visited,0,sizeof(visited));

        scanf("%d%d\n",&H,&W);
        for(int r=1;r<=H;r++)   //如果一行後有空白，直接讀一行會出錯。
        {
            for(int c=1;c<=W;c++)
                scanf("%c",&map[r][c]);
            getchar();
        }

        for(int r=1;r<=H;r++)
            for(int c=1;c<=W;c++)
                if(!visited[r][c])
                {
                    state=max(state,++letter[map[r][c]-'a']);
                    dfs(r,c);
                }

        printf("World #%d\n",++Case);
        for(int i=state;i>=1;i--) //state多的先輸出
            for(int j=0;j<26;j++)
                if(letter[j]==i)
                    printf("%c: %d\n",'a'+j,i);
    }

    return 0;
}


d385
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

bool cmp(string a, string b)
{
    return (a+b) > (b+a);
}

int main()
{
    int n;
    while (cin >> n && n!=0)
    {
        vector<string> v(n);
        string temp;
        for(string &s:v)
            cin >> s;

        sort(v.begin(),v.end(),cmp);
        for(string s:v)
            cout << s;
        cout << endl;
    }
    return 0;
}


d390
#include<iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int dp[100000];

int main(int argc, char** argv) {

  int t,m,sum,half,a[100];
  cin >> t;
    
  while(t--)
  {
      cin >> m;
      sum = 0;
      
      for(int i=0;i<m;i++)
      {
       	cin >> a[i];
       	sum+=a[i];
      }
        
      half=sum/2;
        
      for(int i=0;i<=half;i++)
	dp[i]=0;
        
      for(int i=0;i<m;i++)	        //0-1 knapsack每樣物品只有一個，cost與weight視為相同
        for(int j=half;j-a[i]>=0;j--) 	//重量由右邊計算來
          if( dp[j] < dp[ j-a[i] ]+a[i] )
	 	dp[j]=dp[ j-a[i] ]+a[i];
        
      cout << sum-dp[half]*2 << endl;
    }
    
    return 0;
}


d418
#include <iostream>
using namespace std;
int main () {
    int t,n;
    cin >> t;
    while(t--)
    {
        string str="";
        cin >> n;
        if(n<10)
            cout << n << endl;
        else
        {
            for(int i=9; i>=2 && n!=1; i--)
            {
                while(n!=1 && n%i==0)
                {
                    str=char(i+'0') + str;
                    n/=i;
                }
            }

            cout << (n==1 ? str : "-1") << endl;
        }
    }

    return 0;
}


d424
#include <iostream>
using namespace std;
int main()
{
    int l,h,r,height[10001]={0};

    while(cin >> l >> h >> r)
    {
        for(int i=l;i<r;i++)
            if(h>height[i])
                height[i]=h;
    }

    if(height[0]>0)
       cout << "0 " << height[0] << " ";

    for(int i=1;i<10001;i++)
        if(height[i]!=height[i-1])
            cout << i << " " << height[i] << " ";

    cout << endl;

    return 0;
}


d440
#include <iostream>
#include <cmath>  
using namespace std;  
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
int pFactor[50000];
int main(int argc, char** argv) {
	int n;
	while( cin >> n && n)
	{
		int ans=n,top=0;
		if (n==1){
			cout << 0 << endl;
			continue;
		}

		for (int i=2;i<=(int)sqrt(n);i++)
		{
			if (n%i==0)
			{
				pFactor[top++]=i;	//求n的質因數 
				while((n%i)==0)
					n/=i;    
			}    
		}
		
		if (n!=1) 
			pFactor[top++]=n;
        
		for (int i=0;i<top;i++) 
			ans=ans/pFactor[i]*(pFactor[i]-1); //以歐拉函數計算 

		cout << ans << endl;
	}
	
	return 0;
}


/* 全部求會 RE (SIGABRT) 空間太大 
	int n;
	#define N  1000000001
	int* phi = new int[N];

	memset(phi,0,sizeof(phi));

	for(int i=2;i<=N;i++)	//求質數。若i是質數，值無0。i不是質數，質為i。 
		if(!phi[i])
			for(int j=i+i;j<=N;j+=i)
				phi[j]=j;
	
	for(int i=2;i<=N;i++)
		if(!phi[i])
		{
			phi[i]=i-1;//若i是質數，則其歐拉函數為該數值-1
			for(int j=i+i;j<=N;j+=i)
			{
				phi[j]=phi[j]/i*(i-1);
			}
		}

	while (cin >> n && n) 
		cout << phi[n] << endl;  
        
	delete[] phi;
*/


d442
#include <iostream>
#include <cstdio>
#include <set>
using namespace std;

int nextNum(int n)
{
    int sum=0;
    while(n>0)
    {
        sum+=(n%10)*(n%10);
        n/=10;
    }
    return sum;
}

int main()
{
    int T,Case=1,num,n;

    cin >> T;
    while(T--)
    {
        set<int> s;
        bool happy=true;

        cin >> num;
        s.insert(num);
        n=num;

        while(n!=1)
        {
            n=nextNum(n);
            if(s.find(n)!=s.end())
            {
                happy=false;
                break;
            }
            s.insert(n);
        }

        if(happy)
            printf("Case #%d: %d is a Happy number.\n",Case++,num);
        else
            printf("Case #%d: %d is an Unhappy number.\n",Case++,num);
    }

    return 0;
}


d492
#include<iostream>
#include<cstdio>
#include<map>
using namespace std;

int main(){
    int T;
    scanf("%d\n",&T);
    while(T--)
    {
        map<string,int> m;
        string s;
        int total=0;

        while(getline(cin,s) && s!="")
        {
            m[s]++,
            total++;
        }

        for(auto elm:m)
            printf("%s %.4f\n",elm.first.c_str(),(double)elm.second*100.0/total);
    }
}


d542
#include <iostream>
#include <cstring>
using namespace std;
#define N 500001
int arr[N],tmp[N];
long long int ans=0;

void mergeSort(int l,int r)
{
    if(l<r)
    {
        int mid=(l+r)/2, i=l, j=mid+1, cur=0;

        mergeSort(l,mid);
        mergeSort(mid+1,r);

        while(i<=mid && j<=r)
        {
            if (arr[i]<=arr[j])         //相等時不算交換次數
                tmp[cur++]=arr[i++];
            else
            {
                tmp[cur++]=arr[j++];
                ans+=(mid-i+1);
            }
        }

        while(i<=mid)
            tmp[cur++]=arr[i++];
        while(j<=r)
            tmp[cur++]=arr[j++];
        for(int m=0;m<cur;m++)
            arr[l++]=tmp[m];
    }
}

int main()
{
    int n;
    while(cin >> n && n!=0)
    {
        memset(arr,0,sizeof(arr));
        ans=0;
        for(int i=0;i<n;i++)
            cin >> arr[i];

        mergeSort(0,n-1);
        cout << ans << endl;
    }
    return 0;
}


d658
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
  int line=1,n;
  while(cin >> n && n>0)
    cout << "Case " << line++ << ": " << ceil(log2(n)) << endl;
	
  return 0;
}


d660
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int T,N,h,l,now,next;
	
	cin >> T;
	
	for(int i=0;i<T;i++)
	{
		cin >> N;	
		h=0;
		l=0;
		cin >> now;
		
		for(int j=0;j<N-1;j++)
		{
			cin >> next;	
			if(next>now)
				h++;
			else if(next<now)
				l++;
			
			now=next;
		}
		cout << "Case " << i+1 << ": " << h << " " << l << endl;
	}
  
	return 0;
}


d663
#include<iostream>
#include<queue>
using namespace std;

int primeSet[1001];

int bfs(int S,int T)
{
    int transNum[1001]={0}; //S到每個數字(索引值)的轉換次數
    queue<int> q;
    q.push(S);

    while (!q.empty())
    {
        int A=q.front();
        q.pop();

        for (int i=0; primeSet[i]<A; i++)
        {
            if (A%primeSet[i]==0)   //產生同一轉換次數的B(加上所有小於A的質因數)，並放入佇列
            {
                int B=A+primeSet[i];

                if (transNum[B]!=0)    //如果產生的數字已存在佇列，則忽略，因為新生的數字轉換次數一定較大。
                    continue;
                else if (B>T)
                    break;
                else if (B==T)
                    return transNum[A]+1;
                else if (B<T)
                {
                    transNum[B]=transNum[A]+1;
                    q.push(B);
                }
            }
        }
    }

    return -1;
}

int main()
{
    //先建小於1000的質數表
    int c=0,Case=0,S,T;
    vector<bool> prime(1001,true); //vector大小為1001，初值為true
    prime[0]=false;
    prime[1]=false;

    for(int i=2;i<=1001;i++)
    {
        if(prime[i])
        {
            for(int j=i+i;j<=1001;j+=i)   //i的倍數都不是質數
                prime[j]=false;
        }
    }

    for(int i=2;i<=1001;i++)
        if(prime[i])
            primeSet[c++]=i;

    while( cin >> S >> T && S!=0 && T!=0)
        cout << "Case " << ++Case << ": " << ( S==T ? 0 : bfs(S,T) ) << endl;

    return 0;
}



d667
#include <iostream>
#include <cstdlib>
#include <queue>
using namespace std;

int main()
{
    int n,Case=1;

    while(cin >> n && n!=0)
    {
        int s,t,c,u,v,w;
        int adj[n+1][n+1]={0};  //residue capacity

        cin >> s >> t >> c;
        for(int i=0;i<c;i++)
        {
            cin >> u >> v >> w;
            adj[u][v]+=w;
            adj[v][u]+=w;
        }

        //Edmonds-Karp Algorithm
        int flow=0; //目前的流量
        while(true) //直到沒有擴充路徑(擴充流量)
        {
            queue<int> Q;
            int prev_node[n+1]={0}; //prev_node[a]=b 表示 b->a

            Q.push(s);
            prev_node[s]=s; //起點的前一個點也設為自己
            while(!Q.empty() && prev_node[t]==0)  //BFS找擴充路徑
            {
                int now=Q.front();
                Q.pop();
                for(int i=1;i<=n;i++)
                    if(adj[now][i]>0 && prev_node[i]==0)
                    {
                        prev_node[i]=now;
                        Q.push(i);
                    }
            }

            if (!prev_node[t]) //沒有擴充路徑
                break;
            else    //更新擴充路徑上每一條邊的流量
            {
                int from=prev_node[t],to=t,minFlow=1e9;  //先找出路徑上的最小流量，從終點往起點檢查
                do{
                    minFlow= min(minFlow,adj[from][to]);
                    to=from;            //     from to
                    from=prev_node[to]; //from to
                }while(from!=to);

                from=prev_node[t];
                to=t;
                do{ //修正每個邊的流量
                    adj[from][to]-=minFlow;
                    adj[to][from]+=minFlow;
                    to=from;
                    from=prev_node[to];
                }while(from!=to);
                flow+=minFlow;
            }
        }

        printf("Network %d\nThe bandwidth is %d.\n\n",Case++,flow);
    }

    return 0;
}


d671
#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;

int main() {
    int t;
    scanf("%d\n", &t);
    while(t--)
    {
        string line;
        getline(cin,line);
        int len=line.size(),sq=sqrt(len);

        if(sq*sq!=len)
            cout << "INVALID" << endl;
        else
        {
            for(int i=0;i<sq;i++)
                for(int j=0;j<sq;j++)
                    cout << line[j*sq+i];
            cout << endl;
        }
    }
    return 0;
}


d673
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int s,prob[12],req[12],cas=1;
    
  while(cin >> s)
	{
		if (s<0)
			break;
			
    for(int i=0;i<12;i++)
			cin >> prob[i];

    for(int i=0;i<12;i++)
			cin >> req[i];
      
		cout << "Case " << cas++ << ":\n";
		
		for (int i=0;i<12;i++)
		{
			cout << "No problem";
			if (s-req[i]>=0)
			{
				cout << "! :D\n";
				s=s+prob[i]-req[i];
			}
			else
			{
				cout << ". :(\n";
				s=s+prob[i];	
			} 
    }
	
  }

  return 0;
}


d674
#include <iostream>
#include <cstdio>
#include <string>
using namespace std;

int main(){
    int Case=0;
    string s1,s2;
    while( getline(cin,s1) && s1!="#")
    {
        int lcs[101][101]={0};
        getline(cin,s2);

        for(int i=1;i<=s1.size();i++)
            for(int j=1;j<=s2.size();j++)
                if(s1[i-1]==s2[j-1])
                    lcs[i][j]=lcs[i-1][j-1]+1;
                else
                    lcs[i][j]=max(lcs[i-1][j],lcs[i][j-1]);

        printf("Case #%d: you can visit at most %d cities.\n",++Case,lcs[s1.size()][s2.size()]);
    }

    return 0;
}


d731
#include<cstdio>
#include<iostream>
#include<algorithm>
using namespace std;

struct floor{
    int size,color;

    bool operator<(const floor &other) //運算子多載
    {
        return size > other.size;
    }
}f[500000];

int main(){
    int p,n;
    cin >> p;
    while(p--)
    {
        cin >> n;
        for(int i=0;i<n;i++)
        {
           cin >> f[i].color;
           f[i].size=abs(f[i].color);
        }

        sort(f,f+n);

        int ans=1,preSize=f[0].size,preColor=f[0].color;

        for(int i=1;i<n;i++)
        {
            if( (f[i].color>0 && preColor<0) || (f[i].color<0 && preColor>0) )
            {
                ans++;
                preColor=f[i].color;
            }
        }

        cout << ans << endl;
    }

    return 0;
}


d762
#include <iostream>
#include <algorithm>
using namespace std;

int n[5];
int dfs(int sum, int i)
{
    if (i==5)
        return (sum==23);
    return dfs(sum+n[i],i+1) || dfs(sum-n[i],i+1) || dfs(sum*n[i],i+1);
}

int main()
{
    while (cin >> n[0] >> n[1] >> n[2] >> n[3] >> n[4] && (n[0]||n[1]||n[2]||n[3]||n[4]))
    {
            sort(n,n+5);
            bool found=false;
            do
            {
                if (found=dfs(n[0],1))
                    break;
            }while(next_permutation(n,n+5));

            cout << (found?"Possible":"Impossible") << endl;
    }

    return 0;
}


d813
解二，有考慮兩集合合併時的大小
#include <iostream>
#include <cstdio>
using namespace std;
int group,set[50001],setNum[50001];

int findSet(int v)
{
    if (set[v]==v)
        return v;
    else
        return set[v]=findSet(set[v]);
 }

void unite(int a, int b)
{
    a=findSet(a);
    b=findSet(b);
    if(a!=b)
    {
        group--;
        if(setNum[a]<setNum[b])    //將集合小的加入集合大的
        {
            set[a]=b;
            setNum[b]+=setNum[a];
        }
        else
        {
            set[b]=a;
            setNum[a]+=setNum[b];
        }
    }
}

int main()
{
    int n,m,i,j,Case=0;
    while(cin >> n >> m)
    {
        group=n;
        for(int i=1;i<=n;i++)
        {
            set[i]=i;
            setNum[i]=1;
        }

        while(m--)
        {
            cin >> i >> j;
            unite(i,j);
        }

        cout << "Case " << ++Case << ": " << group << endl;
    }
    return 0;
}

解二
#include <iostream>
#include <cstdio>
using namespace std;
int group,set[50001];

int findSet(int v)
{
    if (set[v]==v)
        return v;
    else
        return set[v]=findSet(set[v]);
 }

void unite(int a, int b)
{
    a=findSet(a);
    b=findSet(b);
    if(a!=b)
    {
        group--;
        set[a]=b; //測資不大，隨意指定b為續存集合
    }
    
}

int main()
{
    int n,m,i,j,Case=0;
    while(cin >> n >> m)
    {
        group=n;
        for(int i=1;i<=n;i++)
            set[i]=i;

        while(m--)
        {
            cin >> i >> j;
            unite(i,j);
        }

        cout << "Case " << ++Case << ": " << group << endl;
    }
    return 0;
}


d768
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> graph[200];
//vector< vector<int> > graph;
int visited[200];   //記錄此節點是否拜訪過
int color[200];     //記錄節點顏色
bool bicolorable;

void dfs(int now)
{
    visited[now]=1;

    for(int i=0;i<graph[now].size();i++)
    {
        int adjacent=graph[now][i];

        if(color[adjacent]==0)                  //相鄰節點沒被上色
            color[adjacent]=(color[now]==1?2:1);
        else if(color[now]==color[adjacent])    //相鄰節點有上色，檢查顏色是否一樣
            bicolorable=false;

        if(!visited[adjacent])
            dfs(adjacent);
    }
}

int main()
{
    int n,m,v1,v2;;
    while(cin >> n && n!=0)
    {

        bicolorable=true;
        for(int i=0;i<200;i++)
           graph[i].clear();
//        graph.clear();
//        graph.resize(n);

        fill(visited, visited+200, 0);
        fill(color, color+200, 0);


        cin >> m;
        for(int i=0;i<m;i++)
        {
            cin >> v1 >> v2;
            graph[v1].push_back(v2);
            graph[v2].push_back(v1);
        }

        color[0]=1;
        dfs(0);

        cout << ( bicolorable? "BICOLORABLE.":"NOT BICOLORABLE.")<< endl;
    }
}


d793
#include <iostream>
#include <queue>
#include <cstring>
#define N 1000
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

using namespace std;

struct node
{
	int x,y,w;
	node(int a,int b,int c) : x(a),y(b),w(c) {} //struct constructor
	bool operator < (const node& j) const
	{ 
		return w > j.w;
	}
	//w大的順位較低，如果overload operator，要使用 const member function, 確保不會動到任何 member data。 
	//http://www.csie.ntnu.edu.tw/~u91029/C++.html
};

int maze[N][N],dir[4][2]={{0,1},{0,-1},{1,0},{-1,0}};//上下左右
bool visit[N][N];

int dijkstra(int n, int m)
{
	priority_queue<node> pq;
	int i,j;

	memset(visit,0,sizeof(visit));
        
	pq.push(node(1,1,maze[1][1]));

	while(1)
	{
		node now=pq.top();
		int x=now.x,y=now.y,w=now.w;
    	
		if (x==n && y==m)	//已經找完
			break;
		else				//更新起點透過(x,y)到其他點的距離
		{
			pq.pop();
			visit[x][y]=true;
			for (int i=0;i<4;i++)
			{
				int next_x=x+dir[i][0],next_y=y+dir[i][1];
				if ( next_x>0 && next_x<=n && next_y>0 && next_y<=m && !visit[next_x][next_y])
					pq.push( node(next_x, next_y, w+maze[next_x][next_y]) );
			}
		}		
  }
    
  return pq.top().w;
}


int main(int argc, char** argv) {

    int T;
    cin >> T;
    while (T--)
    {
		  int n, m;
		  cin >> n >> m;
		  for(int i=1;i<=n;i++)
  			for(int j=1;j<=m;j++)
				  cin >> maze[i][j];
        
		  cout << dijkstra(n,m) << endl;
    }
    
    return 0;
}


d829
#include<iostream>
#include<algorithm>
using namespace std;

int main()
{
    string s;
    while( cin >> s && s!="#" )
    {
        if( next_permutation(s.begin(),s.end()) )
            cout << s << endl;
        else
            cout << "No Successor" << endl;
    }
    return 0;
}


d879
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
using namespace std;

struct node{
    int x, y;
}s[16];
double d[1<<16]; //以2進位記錄集合，每個位元的權值0、1代表此學生是否在集合，最多16人，所以開1<<16的空間。

double dis(int a, int b)
{
    return sqrt((s[a].x-s[b].x)*(s[a].x-s[b].x) + (s[a].y-s[b].y)*(s[a].y-s[b].y));
}

int main()
{
    int Case=0,n;
    string name;

    while(cin >> n && n!=0)
    {
        n*=2;
        for(int i=0;i<n;i++)
            cin >> name >> s[i].x >> s[i].y;

        d[0]=0;
        for(int S=1; S<(1 << n); S++) //利用二進制進行「子集枚舉」
        {
            int i,j;
            d[S]=1e9;
                                    //找任2點i,j
            for(i=0; i<n; i++)
                if (S & (1 << i))   //若 i 在 S 中
                    break;

            for(j=i+1; j<n; j++)
                if (S & (1 << j))   //若 j 在 S 中
                    d[S]=min(d[S], d[S ^ (1 << i) ^ (1 << j)] + dis(i, j));
        }

        printf("Case %d: %.2lf\n",++Case,d[(1<<n)-1] );
    }

    return 0;
}

e155
#include <iostream>
#include <queue>
using namespace std;
int main()
{
    int n;
    while(cin >> n && n)
    {
        queue<int> Q;
        int card[100]={0},end = 0;

        for(int i=1;i<=n;i++)
            Q.push(i);

        while (Q.size()>1)
        {
            card[end++]=Q.front();
            Q.pop();
            Q.push(Q.front());
            Q.pop();
        }

        if (card[0]!=0)
            cout << "Discarded cards: " << card[0];
        else
            cout << "Discarded cards: " << endl;

        for (int i=1;i<end;i++)
            cout << ", " << card[i];
        cout << endl;
        cout << "Remaining card: " << Q.front() << endl;
    }
}


-------------------------原創/不分類題庫

a007
#include <iostream>
#include <cmath>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int prime[5200]={0};

void setPrimeTable()
{
	bool flag[50000]={0};
	int c = 0;
	for(int i=2;i<=50000;i++)
	{
		if(flag[i]==0)
		{
			prime[c++]= i;
			for (int j=2;j*i<=50000;j++)
				flag[j*i]=1;
		}
	}
}

bool isPrime(int num)
{
	for(int i=0;prime[i]<=sqrt(num);i++)
		if(num%prime[i]==0)
			return false;
	
	return true;
}

int main(int argc, char** argv) {

	setPrimeTable();
	int x;
	while (cin >> x)
	{
		if(isPrime(x))
			cout << "質數" << endl;
		else
			cout << "非質數" << endl; 
	}

	return 0;
}


a129
#include<iostream>
#include<cstdio>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

#define N 100000
#define M 200000

struct edge{
	int v1,v2,w;
}E[M];

int disjoint_set[N];

int cmp(edge a,edge b){
  return a.w<b.w;
}

int findSet(int v){
	if (disjoint_set[v]==v) 
		return v;
	else
	  return disjoint_set[v]=findSet(disjoint_set[v]);//找的過程中，把所有結點的disjoint_set都指向根節點 
}

int main(int argc, char** argv) {
  int n,m,u,v;
  long long int weight;
    
	while(scanf("%d%d",&n,&m)==2){
    weight=0;
        
		for(int i=0;i<n;i++)
			disjoint_set[i]=i;
        
		for(int i=0;i<m;i++)
			cin >> E[i].v1 >> E[i].v2 >> E[i].w;
        
		sort(E,E+m,cmp);
		
    for(int i=0;i<m;i++)
		{
      u=findSet(E[i].v1);
			v=findSet(E[i].v2);
      if(u!=v)
      {
        weight+=E[i].w;
		  	disjoint_set[u]=v;
      }
    }

    for(int i=1;i<n;i++)
			if(findSet(i)!=findSet(0))	//節點全部為同一個集合為有解 
			{
       	weight=-1;
				break;
     	}
        
		cout << weight << endl;
  }

  return 0;
}


a227
#include<iostream>
#include<cstdio>

void hanoi(int n, char A, char B, char C)
{
    if(n==1)
        printf("Move ring %d from %c to %c\n",n,A,C);
    else
    {
        hanoi(n-1,A,C,B);
        printf("Move ring %d from %c to %c\n",n,A,C);
        hanoi(n-1,B,A,C);
    }
}

int main()
{
    int n;
    while(scanf("%d",&n)==1)
    {
        hanoi(n,'A','B','C');
        printf("\n");
    }

    return 0;
}


a233
#include <iostream>
using namespace std;
#define N 1000000
int array[N],temp[N];

void mergeSort(int l,int r)
{
	if(l<r)
	{
		int mid=(l+r)/2, i=l, j=mid+1, cur=0;

		mergeSort(l,mid);
		mergeSort(mid+1,r);

		while(i<=mid && j<=r)
		{
			if (array[i]<array[j])
				temp[cur++]=array[i++];
			else
				temp[cur++]=array[j++];
		}

		while(i<=mid)
			temp[cur++]=array[i++];
		while(j<=r)
			temp[cur++]=array[j++];
		for(int m=0;m<cur;m++)
			array[l++]=temp[m];
	}
}

int main(int argc, char** argv){
	int n;
   	while(cin >> n)
	{
		for(int i=0;i<n;i++)
			cin >> array[i];

		mergeSort(0,n-1);

	        for(int i=0;i<n;i++)
			cout << array[i] << " ";
        	cout << endl;
	}
	return 0;
}


a273
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	
  int n,k;
    
  while (cin >> n >>k)
  {
	if(n==0)
		cout << "Ok!" << endl;
	else if(k==0)
		cout << "Impossib1e!" <<endl;
	else if(n%k==0)
		cout << "Ok!" << endl;
	else 
		cout << "Impossib1e!" <<endl;
  }

  return 0;
}


a275
#include <iostream>
#include <cstring>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int ascii[128];
	char s[1000001];

	while(cin >> s)
	{
		bool found=false;
		memset(ascii,0,sizeof(ascii));
		
		if (strcmp(s,"STOP!!")==0) 
			break;

		for(int i=0;s[i];i++)
			ascii[s[i]]++;

		cin >> s;
		for(int i=0;s[i];i++)
			ascii[s[i]]--;
		
		for(int i=33;i<=126;i++)
			if(ascii[i]!=0)
			{
				found=1;
				break;				
			}

    		if (found==1) 
			cout <<"no" <<endl;
	    	else 
			cout <<"yes"<< endl;          
	}

	return 0;
}


a289
#include <iostream>
#include <algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int mul_inv(int a,int n)
{
	int n0=n,t,q,r,x0=0,x1=1;
	
	if (n==1) 
		return 1;
	
	while (a>1) 
	{
		q=a/n;
		r=a%n;
		a=n;
		n=r;
		
		t=x0;
		x0=x1-q*x0;
		x1=t;
	}
	
	if (x1<0) 
		x1+=n0;
	
	return x1;
}

int main(int argc, char** argv) 
{
	int a,n;
	while(cin >> a >> n)
	{
		if(__gcd(a,n)==1&&n!=1)
			cout << mul_inv(a,n) << endl;
		else
			cout << "No Inverse\n";
	}
	
	return 0;
}


a290
#include<iostream>
#include<cstring>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int n,m,graph[801][801],visited[801];//配合城市編號，陣列由1~800 

void dfs(int node){
    
	for(int i=1;i<=n;i++)
	{
    if(graph[node][i] && !visited[i]) //有路，且沒到過 
		{
       visited[i]=1;
       dfs(i);
    }
	}

}

int main(int argc, char** argv) {
  int a,b,A,B;

  while(cin >> n >> m)
  {
    memset(graph,0,sizeof(graph));
    memset(visited,0,sizeof(visited));

    for(int i=0;i<m;i++)
    {
      cin >> a >> b;
      graph[a][b]=1;
    }
        
    cin >> A >> B;
    visited[A]=1;
    dfs(A);
    cout << (visited[B]?"Yes!!!\n":"No!!!\n");
  }
  
return 0;
}


a445
#include <iostream>
using namespace std;
int fr[10005];
int findSet(int v)
{
    if(fr[v]==v)
        return v;
    else
        return fr[v]=findSet(fr[v]);
}
void Union(int a,int b)
{
    int aSet=findSet(a);
    int bSet=findSet(b);

    if(aSet<bSet)
        fr[bSet]=aSet;
    else
        fr[aSet]=bSet;
}
int main()
{
    int N,M,Q,a,b,p,q;
    while(cin >> N >> M >> Q)
    {
        for(int i=0;i<10005;i++)
            fr[i]=i;

        for(int i=0;i<M;i++)
        {
            cin >> a >> b;
            Union(a,b);
        }

        for(int i=0;i<Q;i++)
        {
            int p,q;
            cin >> p >> q;;
            cout << (findSet(p)==findSet(q)?":)":":(") << endl;
        }
    }
}


a552
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main()
{
    int n,m;
    while(cin >> n >> m)
    {
        int u,v,inDegree[n]={0};
        vector<int> graph[n];
        priority_queue< int,vector<int>,greater<int> > pq;

        while(m--)
        {
            cin >> u >> v;
            graph[u].push_back(v);
            inDegree[v]++;
        }

        for(int i=0;i<n;i++)
            if(inDegree[i]==0)
                pq.push(i);

        while(!pq.empty())
        {
            int u=pq.top();
            pq.pop();
            cout << u << " ";

            for(int v:graph[u])
            {
                inDegree[v]--;
                if(inDegree[v]==0)
                    pq.push(v);
            }
        }
        cout << endl;
    }

    return 0;
}


d587
#include <iostream>
using namespace std;
int main()
{
    int N;
    while(cin >> N)
    {
        int w[100]={0},v[100]={0},dp[10001]={0},vol;
        for(int i=0;i<N;i++)
            cin >> w[i] >> v[i];

        cin >> vol;
        for(int i=0;i<N;i++)
            for(int j=vol;j>=w[i];j--)
                if(dp[j-w[i]]+v[i] > dp[j])
                    dp[j]=dp[j-w[i]]+v[i];

        cout << dp[vol] << endl;
    }
    return 0;
}


a858
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int n;
	while(cin >> n)
	{
		int cnt=0;
		for(int i=0;i<n;i++)
		{
			int r=0,b=0,c;
			for (int j=0;j<n;j++)
			{
				cin >> c;
				if(c==1)r++;
				else if(c==2)b++;
			}
			cnt+=r*b;
		}
		cout << n*(n-1)*(n-2)/6-cnt/2 << endl;  // C(n,3)-異色三角形數量 
	}
	return 0;
}


b351
#include <iostream>
#include <cstring>
using namespace std;
short used[5000][5000];

int main()
{
    int T;
    cin >> T;

    while(T--)
    {
        memset(used,0,sizeof(used));
        int N,R,C,r,c,pr,pc,num;
        cin >> N >> R >> C;

        pr=1;
        pc=N/2+1;
        used[pr][pc]=1;
        num=1;

        while( !(r==R && c==C) )
        {
            num++;
            r=pr-1;
            c=pc-1;

            if(r<1)
                r=N;
            if(c<1)
                c=N;

            if(used[r][c])
            {
                r=pr+1;
                c=pc;
            }

            used[r][c]=1;
            pr=r;
            pc=c;
        }

        cout << num << endl;
    }

    return 0;
}



b428
#include <iostream>
#include <string>
using namespace std;

int main(int argc, char** argv) {
  string a,b;

  while(cin>>a>>b)
  {
    if(a[0]<=b[0])
		  cout<<b[0]-a[0];
    else 
      cout<<26-a[0]+b[0];
    cout<<endl;
  }
    
}


d237
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

bool isprime (int n)
{
      
	bool prime=true;

	if(n==1)
      prime=false;
      
  for (int i=2;i<=sqrt(n);i++)
	{
   	if(n%i==0)
		{
     		prime=false;
      	break;
    }
  }
      
  return prime;
}

int main(int argc, char** argv) {

  long long int sum=2;
    
	for(int i=3;i<=2000000;i+=2)
    if (isprime(i))
			sum+=i;
  cout << sum <<endl;
	
	return 0;
}


d276
#include <iostream>
#include <string>
using namespace std;

int main()
{
    int T;
    cin >> T;
    cin.ignore();

    while(T--)
    {
        int maxx=0,freq[26]={0};
        string s;
        getline(cin,s);

        for(int i=0;i<s.size();i++)
            if(isalpha(s[i]))
                freq[tolower(s[i])-'a']++;

        for(int i=0;i<26;i++)
            if(maxx<freq[i])
                maxx=freq[i];

        for(int i=0;i<26;i++)
            if(freq[i]==maxx)
                cout << (char)('a'+i);
        cout <<endl;
    }

    return 0;
}


d289
#include <iostream>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int main(int argc, char** argv) {
	int coins[8]={1,13,33,43,139,169,1309,2597},dp[8001] = {1},n;
	
	for (int i=0;i<8;i++)
		for (int j=coins[i];j<8001;j++)
			dp[j]+=dp[j-coins[i]];
	
	while (cin >> n)
		cout << dp[n] << endl;

	return 0;
}

 
d323
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;


int main(int argc, char** argv) {

    int n;
	while(cin >> n)
    {
        vector<int> v(n);

        for (int &a:v)
            cin >> a;

        sort(v.begin(),v.end());

        for (int a:v)
            cout << a << " ";
        cout <<endl;
    }

	return 0;
}


d378
#include<iostream>
using namespace std;
int main()
{
    int n,m,Case=0,map[101][101];
    while(cin >> n >> m)
    {
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                cin >> map[i][j];

        for(int i=1;i<n;i++)
            map[i][0]+=map[i-1][0];

        for(int j=1;j<m;j++)
            map[0][j]+=map[0][j-1];

        for(int i=1;i<n;i++)
            for(int j=1;j<m;j++)
                if(map[i-1][j]>map[i][j-1])
                    map[i][j]+=map[i][j-1];
                else
                    map[i][j]+=map[i-1][j];

        cout << "Case #" << ++Case << " :\n" << map[n-1][m-1] << endl;
    }

    return 0;
}


d170
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) 
{
	int n,x1,y1,x2,y2,x3,y3,vx1,vy1,vx2,vy2;
    
	cin >> n;
	for(int i=0;i<n;i++)
	{
		cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
        
		vx1 = x1-x3;
		vy1 = y1-y3;
		vx2 = x2-x3;
		vy2 = y2-y3;
        
		if( (vx1*vx2+vy1*vy2)>0 || (vx1*vy2-vy1*vx2)!=0 )
			cout << "父親大人!母親大人!我快到了！" << endl;
		else 
			cout << "該死的東西!竟敢想讓我死！" << endl;
	}

	return 0;
}

/*
內積(a,b)(x,y)=ax+by=|a||b|cosθ(兩向量長度乘上cos值)，所以算出來為正值代表夾角不超過90度(con0=1、cos90=0)，兩向量為同向。 

外積x分量的行列式值 A1=|a1 a2|=|a1b2-a2b1|=|a||b|sinθ，其幾何意義為 (a1,a2)與(b1,b2)兩平面向量所張成之平行四邊形面積，面積為0代表兩向量夾角不是0度就是180度(sin0=sin180=0)，兩向量為平行。
                        b1 b2

向量方向同向(起點->火、目的->火)或不平行都不會被燒到。 
*/


d171
#include <iostream>
#include <cmath>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
	int n,m;
	while ( cin >> n >> m)
	{
		cout <<floor( m*log10(n) + 1 )<< endl;
	}
	
	return 0;
}


d323
#include <iostream>
#include<vector>
#include<algorithm>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {

  int n;
  vector<int> v;

  cin >> n;
/*
	for (int i=0;i<n;i++)
	{
		int x;
		cin >> x;
		v.push_back(x);
	}
*/

 	v.resize(n);
  for (int &x:v)
    cin >> x;

	sort(v.begin(),v.end());

/*   
	for (int i=0;i<v.size();i++)
 		cout << v[i] << " ";
*/
	for (int x:v)
    cout << x << " ";
	
	cout << endl; 
	return 0;
}


d481
#include <iostream>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
  int a,b,c,d;
  while(cin >> a >> b >> c >> d)
  {
      long long int A[100][100],B[100][100];

      if(b!=c)
  		cout << "Error\n" ;
      else
      {
        for(int i=0;i<a;i++)
	  for(int j=0;j<b;j++)
	    cin >> A[i][j];
            
        for(int i=0;i<c;i++)
          for(int j=0;j<d;j++)
 	    cin >> B[i][j];
            
        for(int i=0;i<a;i++)
        {
          for(int j=0;j<d;j++)
	  {
            long long int sum=0;
            for(int k=0;k<b;k++)
	   	sum+=A[i][k]*B[k][j];
            cout << sum <<" ";
          }
          cout << endl;
        }
      }
  }
    
  return 0;
}


d517
#include<iostream>
#include<cstdio>
#include<map>
#include<string>
using namespace std;

int main(){
    int n;
    while(scanf("%d\n",&n)==1)
    {
        map<string,int> m;
        string line;
        int c=0;

        for (int i=0;i<n;i++)
        {
            getline(cin,line);
            if (m[line]==0)
            {
                m[line]=++c;
                printf("New! %d\n",c);
            }
            else
                printf("Old! %d\n",m[line]) ;
        }
    }
}


d539
ST
#include<iostream>
#include<cmath>
using namespace std;

const int ROW=500000+5;
const int COLUMN=20+5;    //log(500000)/log(2.0)~18.93
int max_st[ROW][COLUMN];

void RMQ_INIT(int seq[], int len)
{
    for(int i=0;i<len;i++)
        max_st[i][0]=seq[i];

    int k=log(len)/log(2.0);
    for(int j=1; j<=k; j++) // 	for(int j=1; (1<<j)<=len; j++)
        for(int i=0; i+(1<<j)-1<=len; i++)
            max_st[i][j]=max(max_st[i][j-1], max_st[i + (1 << (j-1))][j-1]);
}


int main(int argc, char** argv) {
	int N ;

	while(cin >> N)
	{
            int seq[N],M,a,b;
            for (int i=0;i<N;i++)
            cin >> seq[i];
            RMQ_INIT(seq,N);

	    cin >> M;
	    for (int i=0;i<M;i++)
	    {
		cin >> a >> b;
                int l=min(a,b)-1,r=max(a,b)-1;
                int k=log2(r-l+1);  //(int)((log(r-l+1))/log(2.0));
		cout << max(max_st[l][k], max_st[r-(1<<k)+1][k]) << endl;
	    }
	}

	return 0;
}


Segment Tree
#include <iostream>
#include <climits>
using namespace std;

const int MAX_N=500000;
int segTree[4*MAX_N+1];

void build(int k, int l, int r)
{
	if (l==r)
		cin >> segTree[k];
	else
	{
		int m=(l+r)/2;
		build(k*2,l,m);
		build(k*2+1,m+1,r);
		segTree[k]=max(segTree[k*2],segTree[k*2+1]);
	}
}

int query(int a, int b, int k, int l, int r)
{
	if (r<a || b<l)
		return -INT_MAX;
	if (a<=l && r<=b)
		return segTree[k];
	else
	{
		int m=(l+r)/2;
		return max( query(a,b,k*2,l,m), query(a,b,k*2+1,m+1,r) ) ;
	}
}

int main(int argc, char** argv) {
	int N ;
    
	while(cin >> N)
	{
		build(1,1,N);
		int M,a,b;
    	
		cin >> M;
		for (int i=0;i<M;i++)
		{
			cin >> a >> b;
			cout << query(min(a,b),max(a,b),1,1,N) << endl;
		}
	}

	return 0;
}


d549
#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;

int main()
{
    double PA,PB,PC;

    while(cin>>PA>>PB>>PC)      
        printf("%.2f\n",sqrt(PA*PA+PC*PC-PB*PB));  // 畢氏定理 PA^2+PC^2=PB^2+PD^2
}


d614
#include <iostream>
#include <cstring>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

int main(int argc, char** argv) {
    int T;
    char s[1000001];
    
    cin >> T;
    cin.getline(s,1000000);	
    
    while(T--)
    {
        long long int ans=0,num=0;

        cin.getline(s,1000000);
        for(int i=0;s[i]!='\0';i++)
        {
            if(isdigit(s[i]))
		          num=10*num+(s[i]-48);
            else
 	          {
                ans+=num;
                num=0;
            }
        }

        ans+=num;
        cout << ans << endl;
    }
    
    return 0;
}


d652
#include<iostream>
#include<cstring>
using namespace std;

int main()
{
    int n,dp[50][50],m[50];
    while(cin>>n)
    {
        for(int i=0;i<n;i++)
            cin >> m[i];
        n--;

        memset(dp, 0x7f, sizeof(dp)); //初值設為最大值
        for(int i=0;i<n;i++)
            dp[i][i]=0;

        //f(i,j) = min { f(i, k) + f(k+1, j) + r[i]*c[k]*c[j] } i?k< j
        //f(i,j)：從第i個矩陣乘到第j個矩陣，最少的相乘次數。
        for(int l=1;l<n;l++)    //l為包含的矩個數
            for(int i=0;i<n-l;i++)
            {
                int j=i+l;
                for(int k=i;k<j;k++)
                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+m[i]*m[k+1]*m[j+1]);
            }

        cout << dp[0][n-1] <<endl;

    }

    return 0;
}


d653
#include <iostream>
#include <algorithm>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
int n,m,num[100],ans[100];

void next(int nowStep, int start) //nowStep表示目前取到第幾個。num[start]為要開始取的數字。 
{
	
	if(nowStep==m)
	{
		for(int i=0;i<m;i++)
			cout << ans[i] << " ";
		cout << endl;
	}
	else
	{
		int last=-1;
		for(int i=start;i<n;i++) 
		{
			if (n-start < m-nowStep) //若剩下的數字全選都還不夠，就不繼續遞迴下去。(不寫也會過) 
				break;
			if(num[i]!=last)		//在同一狀態(nowStep一樣)，用過的數字不要重覆選。 
			{
				last=num[i];
				ans[nowStep]=num[i];
				next(nowStep+1,i+1);
			}
		}
	}
}

int main(int argc, char** argv) {

	while(cin >> n >> m && n!=0 && m!=0)
	{
		for(int i=0;i<n;i++)
			cin >> num[i];

		sort(num,num+n);
		next(0,0);
	}
	
	return 0;
}


d784
#include <iostream>
using namespace std;
int main()
{
    int T;

    cin>>T;
    while(T--)
    {
      int n,a[100]={0},sum=0,maxx=-10001;;

      cin >> n;
      for(int i=0;i<n;i++)
        cin >> a[i];

      for(int i=0;i<n;i++)
      {
        if(sum>=0)
            sum+=a[i];
        else
            sum=a[i];

        maxx=max(sum,maxx);
      }

      cout<< maxx <<endl;
    }

    return 0;
}


d788
#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
int bit[131073];//2^17=131072，因為分數不會重覆，概念上陣列的索引為分數，bit值為記錄區間出現的分數的個數。 

int lowbit(int x)
{
    return x&(-x);
}

int update(int x, int size)
{
	for (int i=x;i<=size;i+=lowbit(i))
		bit[i]+=1;
}

int query(int x)
{
    int sum=0;
    for (int i=x;i>0;i-=lowbit(i))
    	sum+=bit[i];
	
    return sum; 
}

int main(int argc, char** argv) {
	int N;
    
	while(cin>>N)
	{
			int size=pow(2,ceil(log2(N))),M; // N<=2^size
			memset(bit,0,sizeof(bit));
            
			for(int i=1;i<=N;i++)
			{ 
				cin >> M;
				update(M,size);
				cout << i-query(M-1) << endl; //目前總數-分數1~M-1的個數 
			} 
	} 
	
	return 0;
}


d809
#include<iostream>
using namespace std;

struct D{
    int x, y; 
}s[200]; 

int main()
{
	int N;
  while(scanf("%d", &N) == 1) {
    for(int i=0;i<N;i++)
      scanf("%d %d", &s[i].x, &s[i].y); 
      int max = 0, area;
      for(int i=0;i<N;i++) 
        for(int j=i+1;j<N;j++) 
          for(int k=j+1;k<N;k++)
		  		{
             area=abs(s[i].x*s[j].y+s[j].x*s[k].y+ s[k].x*s[i].y-s[i].y*s[j].x-s[j].y*s[k].x-s[k].y*s[i].x);
             if(area>max) 
                max=area; 
          } 
        
		printf("%.2lf\n", max/2.0); 
  } 
    
 return 0;
}


d828
#include <iostream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

void matrix_mul(int A[2][2],int B[2][2]) //將 A[][]*B[][] 的結果在於 A[][]
{
	int M[2][2]={0};
	
	for(int i=0;i<2;i++)
		for(int j=0;j<2;j++)
			for(int k=0;k<2;k++)
			{
				M[i][j]+=A[i][k]*B[k][j];
				M[i][j]%=10000;
			}

	for(int i=0;i<2;i++)
		for(int j=0;j<2;j++)
			A[i][j]=M[i][j];
}

int main(int argc, char** argv) {
	int n;
    
	while( cin >> n)
	{
		int tmp[2][2] = {{1,1},{1,0}}, ans[2][2] = {{1,1},{1,1}};
		if(n<2)
			cout << 1 << endl;
		else
		{
			n--;
			while(n)
			{
				if (n & 1)
					matrix_mul(ans,tmp);	//ans=ans*tmp;
				matrix_mul(tmp,tmp);		//tmp=tum*tmp;
				n=n/2;
			}
			cout << ans[1][0] << endl;
		}
	}   

	return 0;
}


d872
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char** argv) {

	int n;
	while(cin >> n)
	{
		int t[n],ans=0,t1,t2;
		
		for (int i=0;i<n;i++)
			cin >> t[i];
		sort(t,t+n);
		
		while(n>3)
		{
			t1=t[1]+t[0]+t[n-1]+t[1];	// AB+A+YZ+B
			t2=t[n-2]+t[0]+t[n-1]+t[0];	// AZ+A+AY+A
			ans+=min(t1,t2);
			n-=2;
		}
		
		if (n==3)
			ans+=t[0]+t[1]+t[2];
		else if (n==2)			
			ans+=t[1];
		else if (n==1)
			ans+=t[0];
			
		cout << ans << endl;
	}

	return 0;
}

/*greedy
三人以上，一次減兩個最慢的人 (1) AB + A + YZ + B (2) AZ + A + AY + A
不管(1)(2)，第一快跟第二快總是會回到橋的另一邊，選擇其一小的
*/


縮排 http://tfeng.org/?p=4374